{"version":3,"file":"View-05ac55e1.js","sources":["../../packages/core/data/const.js","../../packages/core/components/editor/Editor.jsx","../../packages/core/components/hoc/View.jsx"],"sourcesContent":["export const COVE_BREAKPOINTS = [ '360', '480', '768', '960', '1170', '1280' ]\n","import { useState, useEffect, useCallback, useRef } from 'react'\n\n// Store\nimport { useGlobalStore } from '../../stores/globalStore'\nimport { useConfigStore } from '../../stores/configStore'\n\n// Data\nimport { COVE_BREAKPOINTS as breakpoints } from '../../data/const'\n\n// Components - Local\nimport Accordion from '../ui/Accordion'\nimport Button from '../element/Button'\nimport Icon from '../ui/Icon'\nimport SplashError from '../ui/SplashError'\n\n// Styles\nimport '../../styles/v2/components/editor.scss'\nimport '../../styles/v2/components/element/editor-utils.scss'\n\nconst Editor = ({ EditorPanels, children, setParentConfig }) => {\n  const { os } = useGlobalStore()\n  const { config, setConfig, updateConfig } = useConfigStore()\n  const { missingRequiredSections } = config\n\n  const [ displayPanel, setDisplayPanel ] = useState(true)\n  const [ displayGrid, setDisplayGrid ] = useState(false)\n  const [ viewportPreview, setViewportPreview ] = useState(null)\n  const [ rotateAnimation, setRotateAnimation ] = useState(false)\n  const [ showConfirm, setShowConfirm ] = useState(false)\n\n  const [ previewDimensions, setPreviewDimensions ] = useState({})\n\n  const resetIcon = useRef(null)\n  const editorPanelRef = useRef(null)\n  const componentContainerRef = useRef(null)\n\n  const convertStateToConfig = () => {\n    let strippedState = JSON.parse(JSON.stringify(config))\n    delete strippedState.newViz\n    return strippedState\n  }\n\n  // Set and clean up the event listener for the hotkeys\n  useEffect(() => {\n    document.addEventListener('keydown', onKeypress)\n    return () => document.removeEventListener('keydown', onKeypress)\n  }, [])\n\n  // Toggle the grid display with the viewport preview\n  useEffect(() => {\n    return viewportPreview ? setDisplayGrid(true) : setDisplayGrid(false)\n  }, [ viewportPreview ])\n\n  // Update the local config object, if the component config context changes\n/*\n  useEffect(() => {\n    setConfig({ ...contextConfig })\n  }, [ contextConfig ])\n*/\n\n  // If missing any required sections, enable the confirmation window,\n  // and keep active until receiving confirmation.\n  useEffect(() => {\n    if (missingRequiredSections === true) setShowConfirm(true)\n    if (missingRequiredSections === false && showConfirm === true) setShowConfirm(false)\n  }, [ missingRequiredSections, showConfirm ])\n\n  // If there is no longer a confirmation, update the component's config.\n  useEffect(() => {\n    if (showConfirm === false) updateConfig(convertStateToConfig())\n  }, [ showConfirm ])\n\n  // If a subcomponent of Wizard or Dashboard, pass config\n  // up to said parent, if the component's config is updated.\n  useEffect(() => {\n    if (setParentConfig) setParentConfig(convertStateToConfig())\n  }, [ config ])\n\n  const viewportPreviewController = useCallback((breakpoint) => {\n    return setViewportPreview(prevState => prevState !== breakpoint ? breakpoint : null)\n  }, [ viewportPreview ])\n\n  const onKeypress = (key) => {\n    if (key.code === 'Escape') setDisplayPanel(display => !display)\n\n    const viewportCommandKey = os === 'MacOS' ? key.metaKey : key.altKey\n\n    if (viewportCommandKey) {\n      key.preventDefault()\n      const keyIndex = key.key - 1\n      if (keyIndex <= breakpoints.length)\n        viewportPreviewController(breakpoints[keyIndex])\n    } else {\n      if (!editorPanelRef.current.contains(document.activeElement)) {\n        if (key.code === 'KeyG') setDisplayGrid(display => !display)\n        if (key.code === 'KeyR') resetPreview()\n      }\n    }\n  }\n\n  // Observe and set editor component widths\n  useEffect(() => {\n    if (!componentContainerRef.current) return\n\n    let resizeObserver = new ResizeObserver(entries => {\n      for (let entry of entries) {\n        let { width, height } = entry.contentRect\n        setPreviewDimensions({ width, height })\n      }\n    })\n\n    resizeObserver.observe(componentContainerRef.current)\n\n    return () => {\n      if (!resizeObserver) return\n      resizeObserver.disconnect()\n      resizeObserver = null\n    }\n  }, [])\n\n  const onBackClick = () => setDisplayPanel(!displayPanel)\n\n  const Confirm = () => {\n    const confirmDone = () => setShowConfirm(false)\n\n    return (\n      <section className=\"cove-splash__waiting\">\n        <section className=\"cove-splash__waiting__container\">\n          <h3>Finish Configuring</h3>\n          <p>Set all required options to the left and confirm below to display the preview.</p>\n          <Button className=\"mt-2 mx-auto\" disabled={missingRequiredSections} onClick={() => confirmDone()}>I'm Done</Button>\n        </section>\n      </section>\n    )\n  }\n\n  //Reset Viewport Preview\n  const resetPreview = useCallback(() => {\n    if (!rotateAnimation && resetIcon.current) {\n      setViewportPreview(null)\n      setRotateAnimation(true)\n      setDisplayGrid(false)\n      resetIcon.current.style.transition = 'transform 800ms cubic-bezier(0.16, 1, 0.3, 1)'\n      resetIcon.current.style.transform = 'rotate(-360deg)'\n\n      const timeoutShow = setTimeout(() => {\n        setRotateAnimation(false)\n        resetIcon.current.style.transition = null\n        resetIcon.current.style.transform = 'rotate(0deg)'\n        resetIcon.current.style.transform = null\n      }, 400)\n\n      return () => clearTimeout(timeoutShow)\n    }\n  }, [ rotateAnimation ])\n\n  return (\n    <div className={`cove-editor${displayPanel ? ' panel-shown' : ''}`}>\n      <button className={`cove-editor__toggle` + (!displayPanel ? ` collapsed` : ``)}\n              title={displayPanel ? `Collapse Editor` : `Expand Editor`} onClick={onBackClick}/>\n      <section className=\"cove-editor__panel\" tabIndex={0} ref={editorPanelRef}>\n        <h2 className=\"cove-editor__panel-heading\" aria-level=\"2\" role=\"heading\">Configure Chart</h2>\n        <div className=\"cove-editor__panel-container\">\n          <section className=\"cove-editor__panel-config\">\n            <Accordion>\n              {EditorPanels().props.children.map((panel) => panel)}\n            </Accordion>\n          </section>\n        </div>\n      </section>\n      <div className=\"cove-editor__content\" data-grid={displayGrid || null}>\n        {showConfirm && <Confirm/>}\n        <div className=\"cove-editor__content-wrap--x\" style={viewportPreview ? { maxWidth: viewportPreview + 'px', minWidth: 'unset' } : null}>\n          <div className=\"cove-editor__content-wrap--y\">\n            <div className=\"cove-editor-utils__breakpoints--px\">\n              {displayGrid && displayPanel && <>\n                {Math.round(previewDimensions.width)}<span className=\"mx-1\" style={{ fontSize: '0.675rem' }}>âœ•</span>{Math.round(previewDimensions.height)}\n              </>}\n            </div>\n            <div className=\"cove-editor__grid-caret--top\" ref={componentContainerRef}>\n              <div className=\"cove-editor__grid-caret--bottom\">\n                {undefined === config?.newViz && config?.runtime && config?.runtime?.editorErrorMessage &&\n                  <SplashError title=\"Error With Configuration\" message={config.runtime.editorErrorMessage}/>\n                }\n                {children}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"cove-editor-utils__hotkeys\">\n          <div className=\"cove-editor-utils__hotkeys--left\">\n            <p className={displayPanel ? 'hotkey--active' : null}>Editor</p>\n            <p className={displayGrid ? 'hotkey--active' : null}>Grid</p>\n            <p className={rotateAnimation ? 'hotkey--active' : null}>Reset</p>\n            <p className={viewportPreview ? 'hotkey--active' : null}>View</p>\n          </div>\n          <div className=\"cove-editor-utils__hotkeys--right\">\n            <p className={displayPanel ? 'hotkey--active' : null}>esc</p>\n            <p className={displayGrid ? 'hotkey--active' : null}>G</p>\n            <p className={rotateAnimation ? 'hotkey--active' : null}>R</p>\n            <p className={viewportPreview ? 'hotkey--active' : null}>\n              {os === 'MacOS' ? <Icon style={{ marginRight: '0.25rem' }} display=\"command\" size={12}/> : 'Alt'} + {viewportPreview ? (breakpoints.indexOf(viewportPreview) + 1) : `[1 - ${breakpoints.length}]`}\n            </p>\n          </div>\n        </div>\n        <div className=\"cove-editor-utils__breakpoints\">\n          <ul className={`cove-editor-utils__breakpoints-list${viewportPreview ? ' has-active' : ''}`}>\n            <li className=\"cove-editor-utils__breakpoints-item\" onClick={() => {\n              setDisplayGrid(display => !display)\n            }}>\n              <div className=\"cove-editor-utils__breakpoints-grid\">\n                <Icon display=\"squareGrid\"/>\n              </div>\n            </li>\n            {breakpoints.map((breakpoint, index) => (\n              <li className={`cove-editor-utils__breakpoints-item${viewportPreview === breakpoint ? ' active' : ''}`} onClick={() => viewportPreviewController(breakpoint)} key={index}>{breakpoint}px</li>\n            ))}\n            <li className=\"cove-editor-utils__breakpoints-item\" onClick={() => {\n              resetPreview()\n            }}>\n              <div className=\"cove-editor-utils__breakpoints-reset\" ref={resetIcon}>\n                <Icon display=\"rotateLeft\"/>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Editor\n","import { useEffect, useRef } from 'react'\n\n// Third Party\nimport PropTypes from 'prop-types'\n\n// Store\nimport { useGlobalStore } from '../../stores/globalStore'\n\n// Components - Core\nimport Editor from '../editor/Editor'\nimport Overlay from '../ui/Overlay'\n\n// Styles\nimport '../../styles/v2/main.scss'\n\nconst View = ({ EditorPanels, isWizard, children }) => {\n  const { viewMode, setViewMode } = useGlobalStore()\n\n  useEffect(() => {\n    if (window.location.href.includes('editor=true')) {\n      if (isWizard) return setViewMode('wizard') //Supplied by Wizard (previously named Editor)\n      return setViewMode('editor')\n    }\n    return () => {}\n  }, [isWizard, setViewMode])\n\n  // Define the anchor ref to attach the Overlay/Modals to\n  const coveAnchor = useRef()\n\n  let view = <>No views match the provided view mode.</>\n\n  // Render the display of the component based on the generated viewMode value in globalStore\n  switch (viewMode) {\n    case 'component':\n      view = (\n        <div className=\"cove\" ref={coveAnchor}>\n          {children}\n          <Overlay/>\n        </div>\n      )\n      break\n    case 'editor':\n      view = (\n        <div className=\"cove\" ref={coveAnchor}>\n          <Editor EditorPanels={EditorPanels}>\n            {children}\n          </Editor>\n          <Overlay/>\n        </div>\n      )\n      break\n    case 'wizard':\n      view = (\n        <div className=\"cove\" ref={coveAnchor}>\n          <Editor EditorPanels={EditorPanels}>\n            {children}\n          </Editor>\n          <Overlay/>\n        </div>\n      )\n      break\n    default:\n      break\n  }\n\n  return <>\n    {view}\n  </>\n}\n\nView.propTypes = {\n  /** **[External]** Defined in the `globalStore` - Sets the current view of the user, depending on the environment settings detected */\n  viewMode: PropTypes.oneOf([ 'component', 'editor', 'wizard' ]),\n  /** The React component export of the EditorPanels for the component */\n  EditorPanels: PropTypes.func\n}\n\nexport default View\n"],"names":["COVE_BREAKPOINTS","Editor","EditorPanels","children","setParentConfig","os","useGlobalStore","config","setConfig","updateConfig","useConfigStore","missingRequiredSections","displayPanel","setDisplayPanel","useState","displayGrid","setDisplayGrid","viewportPreview","setViewportPreview","rotateAnimation","setRotateAnimation","showConfirm","setShowConfirm","previewDimensions","setPreviewDimensions","resetIcon","useRef","editorPanelRef","componentContainerRef","convertStateToConfig","strippedState","useEffect","onKeypress","viewportPreviewController","useCallback","breakpoint","prevState","key","display","keyIndex","breakpoints","resetPreview","resizeObserver","entries","entry","width","height","onBackClick","Confirm","confirmDone","jsxs","jsx","Button","timeoutShow","Accordion","panel","Fragment","_a","SplashError","Icon","index","View","isWizard","viewMode","setViewMode","coveAnchor","view","Overlay","PropTypes"],"mappings":"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"}