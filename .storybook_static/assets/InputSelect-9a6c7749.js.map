{"version":3,"file":"InputSelect-9a6c7749.js","sources":["../../packages/core/components/input/InputSelect.jsx"],"sourcesContent":["import { useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\n\n// Store\nimport { useConfigStore } from '../../stores/configStore'\n\n// Helpers\nimport { getConfigKeyValue } from '../../helpers/configHelpers'\n\n// Components\nimport Label from '../element/Label'\n\n// Styles\nimport '../../styles/v2/components/input/index.scss'\n\nconst InputSelect = (\n  {\n    label,\n    options = [ '' ],\n    initial,\n    initialDisabled,\n    initialSnap,\n    required,\n    tooltip,\n\n    configField,\n    value: inlineValue = '',\n    onChange, className, ...attributes\n  }\n) => {\n  const { config, updateConfigField } = useConfigStore()\n\n  const [ value, setValue ] = useState(configField ? getConfigKeyValue(configField, config) || '' : inlineValue)\n\n  const inputRef = useRef(null)\n\n  const isInitial = (checkValue) => {\n    return initial && (checkValue === initial || checkValue === '')\n  }\n\n  let optionsJsx = null\n\n  // Generate the select dropdown options\n  if (options instanceof Array) {\n    // Handle an Array entry\n    optionsJsx = options.map((option, index) => <option value={option} key={index}>{option}</option>)\n  } else if (options === Object(options)) {\n    // Validate that the remaining non-array value is an object type\n    // and handle an Object entry using its key/value pairs.\n    let optionsArr = []\n    for (let [ optionKey, optionValue ] of Object.entries(options)) {\n      optionsArr.push(<option value={optionKey} key={optionKey}>{optionValue}</option>)\n    }\n    optionsJsx = optionsArr\n  }\n\n  // Add custom, initial option\n  if (optionsJsx && (initial || initialDisabled)) optionsJsx.unshift(\n    <option value=\"\" hidden={(initialDisabled && value !== '') || null} disabled={initialDisabled || null} key=\"default\">{initial}</option>\n  )\n\n  // Handle updating of config data when select option is changed\n  const onChangeHandler = (e) => {\n    let eventValue = e.target.value\n    setValue(eventValue)\n\n    // If either no initial option is set, or the option selected is not an initial value\n    if (!isInitial(eventValue)) {\n      // Update a config field value, if configField array was supplied\n      if (configField) updateConfigField(configField, eventValue)\n\n      // Run any additional onChange functions supplied\n      if (onChange) onChange(e)\n    }\n\n    // Resets selected option to default if initialSnap is set\n    // Used for multiple select options to add one, snap back to start, and allow another option to be selected;\n    // Examples: adding filtered data keys, attaching multiple data sets, etc.\n    if (initialSnap && isInitial('')) setValue('')\n  }\n\n  return (\n    <>\n      {label &&\n        <Label tooltip={tooltip} onClick={() => {\n          inputRef.current.focus()\n          inputRef.current.click()\n        }}>\n          {label}\n        </Label>\n      }\n      {optionsJsx ?\n        <select className={`cove-input${required && (value === undefined || value === '') ? ' cove-input--error' : ''}${className ? ' ' + className : ''}`}\n                value={value} onChange={(e) => onChangeHandler(e)} {...attributes}\n                ref={inputRef}\n        >\n          {optionsJsx.map(option => (option))}\n        </select> :\n        <p className=\"mb-2\"><i>No options are available...</i></p>\n      }\n    </>\n  )\n}\n\nInputSelect.propTypes = {\n  label: PropTypes.string,\n  value: PropTypes.any,\n  options: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.object\n  ]),\n  initial: PropTypes.string,\n  initialDisabled: PropTypes.bool,\n  /** Snap returns to the initial value, regardless of previous selection **/\n  initialSnap: PropTypes.bool,\n  required: PropTypes.bool,\n  tooltip: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string\n  ]),\n  onChange: PropTypes.func\n}\n\nexport default InputSelect\n"],"names":["InputSelect","label","options","initial","initialDisabled","initialSnap","required","tooltip","configField","inlineValue","onChange","className","attributes","config","updateConfigField","useConfigStore","value","setValue","useState","getConfigKeyValue","inputRef","useRef","isInitial","checkValue","optionsJsx","option","index","jsx","optionsArr","optionKey","optionValue","onChangeHandler","eventValue","jsxs","Fragment","Label","PropTypes"],"mappings":"qQAeA,MAAAA,EAAA,CACA,CACA,MAAAC,EACA,QAAAC,EAAA,CAAA,EAAA,EACA,QAAAC,EACA,gBAAAC,EACA,YAAAC,EACA,SAAAC,EACA,QAAAC,EAEA,YAAAC,EACA,MAAAC,EAAA,GACA,SAAAC,EAAA,UAAAC,EAAA,GAAAC,CACA,IACA,CACA,KAAA,CAAA,OAAAC,EAAA,kBAAAC,CAAA,EAAAC,EAAA,EAEA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAAV,EAAAW,EAAAX,EAAAK,CAAA,GAAA,GAAAJ,CAAA,EAEAW,EAAAC,SAAA,IAAA,EAEAC,EAAAC,GACApB,IAAAoB,IAAApB,GAAAoB,IAAA,IAGA,IAAAC,EAAA,KAGA,GAAAtB,aAAA,MAEAsB,EAAAtB,EAAA,IAAA,CAAAuB,EAAAC,IAAAC,EAAA,SAAA,CAAA,MAAAF,EAAA,SAAAA,CAAA,EAAAC,CAAA,CAAA,UACAxB,IAAA,OAAAA,CAAA,EAAA,CAGA,IAAA0B,EAAA,CAAA,EACA,OAAA,CAAAC,EAAAC,CAAA,IAAA,OAAA,QAAA5B,CAAA,EACA0B,EAAA,KAAAD,EAAA,SAAA,CAAA,MAAAE,EAAA,SAAAC,GAAAD,CAAA,CAAA,EAEAL,EAAAI,CACA,CAGAJ,IAAArB,GAAAC,IAAAoB,EAAA,QACAG,EAAA,SAAA,CAAA,MAAA,GAAA,OAAAvB,GAAAY,IAAA,IAAA,KAAA,SAAAZ,GAAA,KAAA,YAAA,SAAA,CAAA,EAIA,MAAA2B,EAAA,GAAA,CACA,IAAAC,EAAA,EAAA,OAAA,MACAf,EAAAe,CAAA,EAGAV,EAAAU,CAAA,IAEAxB,GAAAM,EAAAN,EAAAwB,CAAA,EAGAtB,GAAAA,EAAA,CAAA,GAMAL,GAAAiB,EAAA,EAAA,GAAAL,EAAA,EAAA,CAAA,EAGA,OAEAgB,EAAAC,EAAA,CAAA,SAAA,CAAAjC,GACA0B,EAAAQ,EAAA,CAAA,QAAA5B,EAAA,QAAA,IAAA,CACAa,EAAA,QAAA,QACAA,EAAA,QAAA,OAAA,EAEA,SACAnB,EAAA,EAEAuB,EACAG,EAAA,SAAA,CAAA,UAAA,aAAArB,IAAAU,IAAA,QAAAA,IAAA,IAAA,qBAAA,KAAAL,EAAA,IAAAA,EAAA,KACA,MAAAK,EAAA,SAAA,GAAAe,EAAA,CAAA,EAAA,GAAAnB,EACA,IAAAQ,EAEA,SAAAI,EAAA,IAAAC,GAAAA,CAAA,CAAA,CACA,IACA,IAAA,CAAA,UAAA,OAAA,SAAAE,EAAA,IAAA,CAAA,uCAAA,CAAA,CAAA,CAEA,CAAA,CAAA,CAEA,EAEA3B,EAAA,UAAA,CACA,MAAAoC,EAAA,OACA,MAAAA,EAAA,IACA,QAAAA,EAAA,UAAA,CACAA,EAAA,MACAA,EAAA,MAAA,CACA,EACA,QAAAA,EAAA,OACA,gBAAAA,EAAA,KAEA,YAAAA,EAAA,KACA,SAAAA,EAAA,KACA,QAAAA,EAAA,UAAA,CACAA,EAAA,OACAA,EAAA,MAAA,CACA,EACA,SAAAA,EAAA,IACA"}