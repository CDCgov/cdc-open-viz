// ../../generateViteConfig.js
import { defineConfig } from "file:///Users/robshelnutt/Sites/cdc-open-viz/node_modules/vite/dist/node/index.js";
import react from "file:///Users/robshelnutt/Sites/cdc-open-viz/node_modules/@vitejs/plugin-react/dist/index.mjs";
import cssInjectedByJsPlugin from "file:///Users/robshelnutt/Sites/cdc-open-viz/node_modules/vite-plugin-css-injected-by-js/dist/esm/index.js";
import svgr from "file:///Users/robshelnutt/Sites/cdc-open-viz/node_modules/vite-plugin-svgr/dist/index.mjs";
import dsv from "file:///Users/robshelnutt/Sites/cdc-open-viz/node_modules/@rollup/plugin-dsv/dist/es/index.js";
import dns from "dns";
dns.setDefaultResultOrder("verbatim");
var generateViteConfig = (componentName, configOptions = {}, reactOptions = {}) => {
  let configOptionsDefault = {
    server: { port: 8080 },
    build: {
      commonjsOptions: {
        include: [/@cdc\/core/, /node_modules/]
      },
      sourcemap: false,
      lib: {
        entry: `src/${componentName}.jsx`,
        formats: ["es"],
        fileName: (format) => `${componentName.toLowerCase()}.js`
      },
      rollupOptions: {
        external: ["react", "reactDOM"],
        output: {
          chunkFileNames: `${componentName.toLowerCase()}-[hash].[format].js`,
          globals: {
            react: "React",
            reactDOM: "ReactDOM"
          }
        }
      }
    },
    plugins: [
      react(reactOptions),
      svgr({
        exportAsDefault: true
      }),
      cssInjectedByJsPlugin(),
      dsv()
    ],
    ...configOptions
  };
  return defineConfig({
    ...configOptionsDefault,
    ...configOptions
  });
};
var generateViteConfig_default = generateViteConfig;

// package.json
var moduleName = "CdcEditor";

// vite.config.js
var vite_config_default = generateViteConfig_default(moduleName);
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vZ2VuZXJhdGVWaXRlQ29uZmlnLmpzIiwgInBhY2thZ2UuanNvbiIsICJ2aXRlLmNvbmZpZy5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9Vc2Vycy9yb2JzaGVsbnV0dC9TaXRlcy9jZGMtb3Blbi12aXpcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9Vc2Vycy9yb2JzaGVsbnV0dC9TaXRlcy9jZGMtb3Blbi12aXovZ2VuZXJhdGVWaXRlQ29uZmlnLmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9yb2JzaGVsbnV0dC9TaXRlcy9jZGMtb3Blbi12aXovZ2VuZXJhdGVWaXRlQ29uZmlnLmpzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZSdcblxuaW1wb3J0IHJlYWN0IGZyb20gJ0B2aXRlanMvcGx1Z2luLXJlYWN0J1xuaW1wb3J0IGNzc0luamVjdGVkQnlKc1BsdWdpbiBmcm9tICd2aXRlLXBsdWdpbi1jc3MtaW5qZWN0ZWQtYnktanMnXG5pbXBvcnQgc3ZnciBmcm9tICd2aXRlLXBsdWdpbi1zdmdyJyAvLyBTdmcgU3VwcG9ydFxuaW1wb3J0IGRzdiBmcm9tICdAcm9sbHVwL3BsdWdpbi1kc3YnIC8vIENTViBTdXBwb3J0XG5pbXBvcnQgZG5zIGZyb20gJ2RucycgLy8gbm9kZUpTXG5cbi8vIEZvcmNlIGxvYWQgZGV2IHNlcnZlciBvbiBgbG9jYWxob3N0YCB2cyAxMjcuMC4wLjFcbmRucy5zZXREZWZhdWx0UmVzdWx0T3JkZXIoJ3ZlcmJhdGltJylcblxuLy8gREVWIE5PVEU6IE1vZGlmaWNhdGlvbnMgbWFkZSB0byB0aGlzIGZpbGUgd2lsbCBub3QgYmUgaG90LWxvYWRlZCB0aHJvdWdoIEhNUiBmb3IgY29tcG9uZW50LlxuLy8gLSBBY3RpdmUgZGV2IHNlcnZlcnMgKCdsZXJuYSBydW4gc3RhcnQnKSBtdXN0IGJlIHJlc3RhcnRlZCBpbiBvcmRlciB0byB2aWV3IHRoZSBjaGFuZ2VkIHNldHRpbmdzLlxuY29uc3QgZ2VuZXJhdGVWaXRlQ29uZmlnID0gKGNvbXBvbmVudE5hbWUsIGNvbmZpZ09wdGlvbnMgPSB7fSwgcmVhY3RPcHRpb25zID0ge30pID0+IHtcbiAgbGV0IGNvbmZpZ09wdGlvbnNEZWZhdWx0ID0ge1xuICAgIHNlcnZlcjogeyBwb3J0OiA4MDgwIH0sXG4gICAgYnVpbGQ6IHtcbiAgICAgIGNvbW1vbmpzT3B0aW9uczoge1xuICAgICAgICBpbmNsdWRlOiBbL0BjZGNcXC9jb3JlLywgL25vZGVfbW9kdWxlcy9dLFxuICAgICAgfSxcbiAgICAgIHNvdXJjZW1hcDogZmFsc2UsXG4gICAgICBsaWI6IHtcbiAgICAgICAgZW50cnk6IGBzcmMvJHtjb21wb25lbnROYW1lfS5qc3hgLFxuICAgICAgICBmb3JtYXRzOiBbJ2VzJ10sXG4gICAgICAgIGZpbGVOYW1lOiAoZm9ybWF0KSA9PiBgJHtjb21wb25lbnROYW1lLnRvTG93ZXJDYXNlKCl9LmpzYCxcbiAgICAgIH0sXG4gICAgICByb2xsdXBPcHRpb25zOiB7XG4gICAgICAgIGV4dGVybmFsOiBbICdyZWFjdCcsICdyZWFjdERPTScgXSxcbiAgICAgICAgb3V0cHV0OiB7XG4gICAgICAgICAgY2h1bmtGaWxlTmFtZXM6IGAke2NvbXBvbmVudE5hbWUudG9Mb3dlckNhc2UoKX0tW2hhc2hdLltmb3JtYXRdLmpzYCxcbiAgICAgICAgICBnbG9iYWxzOiB7XG4gICAgICAgICAgICByZWFjdDogJ1JlYWN0JyxcbiAgICAgICAgICAgIHJlYWN0RE9NOiAnUmVhY3RET00nXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBwbHVnaW5zOiBbXG4gICAgICByZWFjdChyZWFjdE9wdGlvbnMpLFxuICAgICAgc3Zncih7XG4gICAgICAgIGV4cG9ydEFzRGVmYXVsdDogdHJ1ZVxuICAgICAgfSksXG4gICAgICBjc3NJbmplY3RlZEJ5SnNQbHVnaW4oKSxcbiAgICAgIGRzdigpXG4gICAgXSxcbiAgICAuLi5jb25maWdPcHRpb25zXG4gIH1cblxuICByZXR1cm4gZGVmaW5lQ29uZmlnKHtcbiAgICAuLi5jb25maWdPcHRpb25zRGVmYXVsdCxcbiAgICAuLi5jb25maWdPcHRpb25zXG4gIH0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlVml0ZUNvbmZpZ1xuIiwgIntcbiAgXCJuYW1lXCI6IFwiQGNkYy9lZGl0b3JcIixcbiAgXCJ2ZXJzaW9uXCI6IFwiNC4yMy4xXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJSZWFjdCBjb21wb25lbnQgZm9yIGdlbmVyYXRpbmcgYSBuZXcgY29tcG9uZW50IGVudHJ5XCIsXG4gIFwibW9kdWxlTmFtZVwiOiBcIkNkY0VkaXRvclwiLFxuICBcIm1haW5cIjogXCJkaXN0L2NkY2VkaXRvclwiLFxuICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcInN0YXJ0XCI6IFwidml0ZSAtLW9wZW5cIixcbiAgICBcImJ1aWxkXCI6IFwidml0ZSBidWlsZFwiLFxuICAgIFwicHJldmlld1wiOiBcInZpdGUgcHJldmlld1wiLFxuICAgIFwiZ3JhcGhcIjogXCJueCBncmFwaFwiLFxuICAgIFwicHJlcHVibGlzaE9ubHlcIjogXCJsZXJuYSBydW4gLS1zY29wZSBAY2RjL2VkaXRvciBidWlsZFwiXG4gIH0sXG4gIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgXCJ1cmxcIjogXCJnaXQraHR0cHM6Ly9naXRodWIuY29tL0NEQ2dvdi9jZGMtb3Blbi12aXpcIixcbiAgICBcImRpcmVjdG9yeVwiOiBcInBhY2thZ2VzL2VkaXRvclwiXG4gIH0sXG4gIFwiYnVnc1wiOiB7XG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vQ0RDZ292L2NkYy1vcGVuLXZpei9pc3N1ZXNcIlxuICB9LFxuICBcImxpY2Vuc2VcIjogXCJBcGFjaGUtMi4wXCIsXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBjZGMvY2hhcnRcIjogXCJeNC4yMy4xXCIsXG4gICAgXCJAY2RjL2NvcmVcIjogXCJeNC4yMy4xXCIsXG4gICAgXCJAY2RjL2Rhc2hib2FyZFwiOiBcIl40LjIzLjFcIixcbiAgICBcIkBjZGMvZGF0YS1iaXRlXCI6IFwiXjQuMjMuMVwiLFxuICAgIFwiQGNkYy9tYXBcIjogXCJeNC4yMy4xXCIsXG4gICAgXCJAY2RjL21hcmt1cC1pbmNsdWRlXCI6IFwiXjQuMjMuMVwiLFxuICAgIFwiQGNkYy93YWZmbGUtY2hhcnRcIjogXCJeNC4yMy4xXCIsXG4gICAgXCJheGlvc1wiOiBcIl4wLjIxLjFcIixcbiAgICBcImQzXCI6IFwiXjcuMC4wXCIsXG4gICAgXCJodG1sLXJlYWN0LXBhcnNlclwiOiBcIl4zLjAuOFwiLFxuICAgIFwicmVhY3QtZHJvcHpvbmVcIjogXCJeMTEuMi40XCIsXG4gICAgXCJyZWFjdC10YWJsZVwiOiBcIl43LjYuMlwiLFxuICAgIFwidXNlLWRlYm91bmNlXCI6IFwiXjUuMi4wXCIsXG4gICAgXCJ3aGF0d2ctZmV0Y2hcIjogXCJeMy42LjJcIlxuICB9LFxuICBcInBlZXJEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwicmVhY3RcIjogXCJeMTguMi4wXCIsXG4gICAgXCJyZWFjdC1kb21cIjogXCJeMTguMi4wXCJcbiAgfSxcbiAgXCJnaXRIZWFkXCI6IFwiZmY4OWE3YWVhNzRjNTMzNDEzYzYyZWY4ODU5Y2MwMTFlNmIzY2JmYVwiXG59XG4iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9Vc2Vycy9yb2JzaGVsbnV0dC9TaXRlcy9jZGMtb3Blbi12aXovcGFja2FnZXMvZWRpdG9yXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvcm9ic2hlbG51dHQvU2l0ZXMvY2RjLW9wZW4tdml6L3BhY2thZ2VzL2VkaXRvci92aXRlLmNvbmZpZy5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvcm9ic2hlbG51dHQvU2l0ZXMvY2RjLW9wZW4tdml6L3BhY2thZ2VzL2VkaXRvci92aXRlLmNvbmZpZy5qc1wiO2ltcG9ydCBHZW5lcmF0ZVZpdGVDb25maWcgZnJvbSAnLi4vLi4vZ2VuZXJhdGVWaXRlQ29uZmlnLmpzJ1xuaW1wb3J0IHsgbW9kdWxlTmFtZSB9IGZyb20gJy4vcGFja2FnZS5qc29uJ1xuXG5leHBvcnQgZGVmYXVsdCBHZW5lcmF0ZVZpdGVDb25maWcobW9kdWxlTmFtZSlcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBK1MsU0FBUyxvQkFBb0I7QUFFNVUsT0FBTyxXQUFXO0FBQ2xCLE9BQU8sMkJBQTJCO0FBQ2xDLE9BQU8sVUFBVTtBQUNqQixPQUFPLFNBQVM7QUFDaEIsT0FBTyxTQUFTO0FBR2hCLElBQUksc0JBQXNCLFVBQVU7QUFJcEMsSUFBTSxxQkFBcUIsQ0FBQyxlQUFlLGdCQUFnQixDQUFDLEdBQUcsZUFBZSxDQUFDLE1BQU07QUFDbkYsTUFBSSx1QkFBdUI7QUFBQSxJQUN6QixRQUFRLEVBQUUsTUFBTSxLQUFLO0FBQUEsSUFDckIsT0FBTztBQUFBLE1BQ0wsaUJBQWlCO0FBQUEsUUFDZixTQUFTLENBQUMsY0FBYyxjQUFjO0FBQUEsTUFDeEM7QUFBQSxNQUNBLFdBQVc7QUFBQSxNQUNYLEtBQUs7QUFBQSxRQUNILE9BQU8sT0FBTztBQUFBLFFBQ2QsU0FBUyxDQUFDLElBQUk7QUFBQSxRQUNkLFVBQVUsQ0FBQyxXQUFXLEdBQUcsY0FBYyxZQUFZO0FBQUEsTUFDckQ7QUFBQSxNQUNBLGVBQWU7QUFBQSxRQUNiLFVBQVUsQ0FBRSxTQUFTLFVBQVc7QUFBQSxRQUNoQyxRQUFRO0FBQUEsVUFDTixnQkFBZ0IsR0FBRyxjQUFjLFlBQVk7QUFBQSxVQUM3QyxTQUFTO0FBQUEsWUFDUCxPQUFPO0FBQUEsWUFDUCxVQUFVO0FBQUEsVUFDWjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLElBQ0EsU0FBUztBQUFBLE1BQ1AsTUFBTSxZQUFZO0FBQUEsTUFDbEIsS0FBSztBQUFBLFFBQ0gsaUJBQWlCO0FBQUEsTUFDbkIsQ0FBQztBQUFBLE1BQ0Qsc0JBQXNCO0FBQUEsTUFDdEIsSUFBSTtBQUFBLElBQ047QUFBQSxJQUNBLEdBQUc7QUFBQSxFQUNMO0FBRUEsU0FBTyxhQUFhO0FBQUEsSUFDbEIsR0FBRztBQUFBLElBQ0gsR0FBRztBQUFBLEVBQ0wsQ0FBQztBQUNIO0FBRUEsSUFBTyw2QkFBUTs7O0FDbERiLGlCQUFjOzs7QUNEaEIsSUFBTyxzQkFBUSwyQkFBbUIsVUFBVTsiLAogICJuYW1lcyI6IFtdCn0K
