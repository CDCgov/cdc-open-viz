import React, { useState, useEffect } from 'react'
import MapIcon from '../../assets/map-folded.svg?react'
import ChartIcon from '../../assets/icon-chart-bar.svg?react'
import MarkupIncludeIcon from '../../assets/icon-code.svg?react'
import { FilterFunction, JsonEditor, UpdateFunction } from 'json-edit-react'
import './advanced-editor-styles.css'
import _ from 'lodash'
import Tooltip from '../ui/Tooltip'

export const AdvancedEditor = ({
  loadConfig,
  config,
  convertStateToConfig,
  stripConfig = config => config,
  onExpandCollapse = () => {}
}) => {
  const [advancedToggle, _setAdvancedToggle] = useState(false)
  const [configTextboxValue, setConfigTextbox] = useState<Record<string, any>>({})
  const setAdvancedToggle = val => {
    _setAdvancedToggle(val)
    onExpandCollapse()
  }

  const collapseFields: FilterFunction = input => {
    if (['datasets', 'data', 'originalFormattedData', 'formattedData'].includes(String(input.key))) return true
    return false
  }

  const onUpdate: UpdateFunction = val => {
    setConfigTextbox(val.newData)
  }

  useEffect(() => {
    // Only process config when advanced editor is open to improve performance
    if (advancedToggle) {
      let parsedConfig = stripConfig(config)
      if (config.type !== 'dashboard') {
        parsedConfig = convertStateToConfig()
      }

      setConfigTextbox(parsedConfig)
    }
  }, [config, advancedToggle])

  // Initialize config when advanced editor is first opened
  const handleToggleOpen = () => {
    if (!advancedToggle) {
      // Process config only when opening for the first time
      let parsedConfig = stripConfig(config)
      if (config.type !== 'dashboard') {
        parsedConfig = convertStateToConfig()
      }
      setConfigTextbox(parsedConfig)
    }
    setAdvancedToggle(!advancedToggle)
  }

  const typeLookup = {
    chart: ['Charts', 'https://www.cdc.gov/cove/index.html', <ChartIcon />],
    dashboard: ['Dashboard', 'https://www.cdc.gov/cove/index.html', <ChartIcon />],
    map: ['Maps', 'https://www.cdc.gov/cove/index.html', <MapIcon />],
    'markup-include': ['Markup Include', 'https://www.cdc.gov/cove/index.html', <MarkupIncludeIcon />]
  }

  if (!config.type) return <></>
  return (
    <>
      <a
        href={typeLookup[config.type][1]}
        target='_blank'
        rel='noopener noreferrer'
        className='guidance-link'
        style={{ cursor: 'pointer !important' }}
      >
        {typeLookup[config.type][2]}
        <div>
          <span className='heading-3'>Get Help with {typeLookup[config.type][0]}</span>
          <p>Examples and documentation</p>
        </div>
      </a>
      <div className='advanced'>
        <span className='advanced-toggle-link' onClick={handleToggleOpen}>
          <span>{advancedToggle ? `â€” ` : `+ `}</span>Advanced Options
        </span>
        {advancedToggle && (
          <React.Fragment>
            <section className='error-box py-2 px-3 my-2'>
              <div>
                <strong className='pt-1'>Warning</strong>
                <p>This can cause serious errors in your visualization.</p>
              </div>
            </section>
            <p className='pb-2'>
              This tool displays the actual <acronym title='JavaScript Object Notation'>JSON</acronym> configuration
              that is generated by this editor and allows you to edit properties directly and apply them.
            </p>
            <JsonEditor
              className='advanced-json-editor'
              data={configTextboxValue}
              onUpdate={onUpdate}
              rootName=''
              collapse={collapseFields}
            />
            <button
              className='btn btn-success m-2 p-2'
              onClick={() => {
                loadConfig(configTextboxValue)
                setAdvancedToggle(!advancedToggle)
              }}
            >
              Apply Configuration Changes
            </button>
          </React.Fragment>
        )}
      </div>
    </>
  )
}

export default AdvancedEditor
