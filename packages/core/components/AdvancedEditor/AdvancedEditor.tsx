import React, { useState, useEffect } from 'react'
import MapIcon from '../../assets/map-folded.svg'
import ChartIcon from '../../assets/icon-chart-bar.svg'
import MarkupIncludeIcon from '../../assets/icon-code.svg'
import { FilterFunction, JsonEditor, UpdateFunction } from 'json-edit-react'
import { formatConfigBeforeSave as stripConfig } from '../../helpers/formatConfigBeforeSave'
import './advanced-editor-styles.css'
import _ from 'lodash'

export const AdvancedEditor = ({ loadConfig, config, convertStateToConfig, onExpandCollapse = () => {} }) => {
  const [advancedToggle, _setAdvancedToggle] = useState(false)
  const [configTextboxValue, setConfigTextbox] = useState<Record<string, any>>({})
  const setAdvancedToggle = val => {
    _setAdvancedToggle(val)
    onExpandCollapse()
  }

  const collapseFields: FilterFunction = input => {
    if (['datasets', 'data', 'originalFormattedData'].includes(String(input.key))) return true
    return false
  }

  const onUpdate: UpdateFunction = val => {
    setConfigTextbox(val.newData)
  }

  useEffect(() => {
    let parsedConfig = stripConfig(config)
    if (config.type !== 'dashboard') {
      parsedConfig = convertStateToConfig()
    }

    setConfigTextbox(parsedConfig)
  }, [config])

  const typeLookup = {
    chart: ['Charts', 'https://www.cdc.gov/wcms/4.0/cdc-wp/data-presentation/bar-chart.html', <ChartIcon />],
    dashboard: ['Dashboard', 'https://www.cdc.gov/wcms/4.0/cdc-wp/data-presentation/bar-chart.html', <ChartIcon />],
    map: ['Maps', 'https://www.cdc.gov/wcms/4.0/cdc-wp/data-presentation/data-map.html', <MapIcon />],
    'markup-include': ['Markup Include', 'https://www.cdc.gov/wcms/4.0/cdc-wp/data-presentation/Markup-Include.html', <MarkupIncludeIcon />]
  }

  if (!config.type) return <></>
  return (
    <>
      <a href={typeLookup[config.type][1]} target='_blank' rel='noopener noreferrer' className='guidance-link'>
        {typeLookup[config.type][2]}
        <div>
          <span className='heading-3'>Get Help with {typeLookup[config.type][0]}</span>
          <p>Examples and documentation</p>
        </div>
      </a>
      <div className='advanced'>
        <span className='advanced-toggle-link' onClick={() => setAdvancedToggle(!advancedToggle)}>
          <span>{advancedToggle ? `â€” ` : `+ `}</span>Advanced Options
        </span>
        {advancedToggle && (
          <React.Fragment>
            <section className='error-box py-2 px-3 my-2'>
              <div>
                <strong className='pt-1'>Warning</strong>
                <p>This can cause serious errors in your visualization.</p>
              </div>
            </section>
            <p className='pb-2'>
              This tool displays the actual <acronym title='JavaScript Object Notation'>JSON</acronym> configuration that is generated by this editor and allows you to edit properties directly and apply them.
            </p>
            <button
              className='btn '
              onClick={() => {
                navigator.clipboard.writeText(JSON.stringify(configTextboxValue))
              }}
            >
              Copy to Clipboard
            </button>
            <JsonEditor className='advanced-json-editor' data={configTextboxValue} onUpdate={onUpdate} rootName='' collapse={collapseFields} />
            <button
              className='btn full-width'
              onClick={() => {
                loadConfig(configTextboxValue)
                setAdvancedToggle(!advancedToggle)
              }}
            >
              Apply
            </button>
          </React.Fragment>
        )}
      </div>
    </>
  )
}

export default AdvancedEditor
