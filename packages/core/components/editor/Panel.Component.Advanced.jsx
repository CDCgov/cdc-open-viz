import React, { useState } from 'react'

// Hooks
import { useVisConfig } from '../../hooks/store/useVisConfig'

// Components
import GuidanceBlock from '../element/GuidanceBlock'
import Button from '../element/Button'
import InputText from '../input/InputText'

// Styles
import '@cdc/core/styles/v2/components/ui/alert.scss'

export const PanelComponentAdvanced = () => {
  const { config, updateVisConfig } = useVisConfig()

  const [ advancedToggle, setAdvancedToggle ] = useState(false)
  const [ configTextboxValue, setConfigTextbox ] = useState(config)

  const typeLookup = {
    chart: [ 'Charts', 'https://www.cdc.gov/wcms/4.0/cdc-wp/data-presentation/bar-chart.html', 'chartBar' ],
    map: [ 'Maps', 'https://www.cdc.gov/wcms/4.0/cdc-wp/data-presentation/data-map.html', 'mapFolded' ],
    'markup-include': [ 'Markup Include', 'https://www.cdc.gov/wcms/4.0/cdc-wp/data-presentation/Markup-Include.html', 'code' ]
  }

  if (!config.type) return

  return (
    <>
      <GuidanceBlock className="mt-4 mx-2" linkTo={typeLookup[config.type][1]} icon={typeLookup[config.type][2]}>
        <GuidanceBlock.Title>
          Get Help with {typeLookup[config.type][0]}
        </GuidanceBlock.Title>
        <GuidanceBlock.Content>
          <p>Examples and documentation</p>
        </GuidanceBlock.Content>
      </GuidanceBlock>

      <div className="advanced">
        <span className="advanced-toggle-link" onClick={() => setAdvancedToggle(!advancedToggle)}>
          <span>{advancedToggle ? `â€” ` : `+ `}</span>Advanced Options
        </span>
        {advancedToggle && (
          <>
            <section className="cove-alert cove-alert--caution my-2">
              <p><strong>Warning:</strong> This can cause serious errors in your visualization.</p>
            </section>
            <p className="pb-2">
              This tool displays the actual <acronym title="JavaScript Object Notation">JSON</acronym> configuration that is generated by this editor and allows you to edit properties directly and apply them.
            </p>
            <InputText type="textarea" value={JSON.stringify(configTextboxValue, undefined, 2)} onChange={event => setConfigTextbox(event.target.value)} />
            <Button onClick={() => updateVisConfig(JSON.parse(configTextboxValue))}>
              Apply
            </Button>
          </>
        )}
      </div>
    </>
  )
}

export default PanelComponentAdvanced
