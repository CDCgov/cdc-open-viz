@use 'sass:string';

$theme: (
  'amber': ('#fbab18', '#ffd54f', '#ffecb3', '#fff7e1'),
  'blue': ('#005eaa', '#88c3ea', '#c0e9ff', '#edf9ff'),
  'brown': ('#705043', '#ad907b', '#d7ccc8', '#f2ebe8'),
  'cyan': ('#007B91', '#65b0bd', '#cce5e9', '#ebf5f6'),
  'green': ('#4b830d', '#84bc49', '#dcedc8', '#f1f8e9'),
  'indigo': ('#26418f', '#92a6dd', '#dee8ff', '#f2f6ff'),
  'orange': ('#bb4d00', '#ffad42', '#ffe97d', '#fff4cf'),
  'pink': ('#af4448', '#e57373', '#ffc2c2', '#ffe7e7'),
  'purple': ('#712177', '#b890bb', '#e3d3e4', '#f7f2f7'),
  'slate': ('#29434e', '#7e9ba5', '#b6c6d2', '#e2e8ed'),
  'teal': ('#00695c', '#4ebaaa', '#ceece7', '#ebf7f5')
);

/* TODO: Cove Refactor
 !!!!!!!!
 Implementation of theme colors should NOT be together with color definitions.
 All of the extraneous stuff for the components either need to be moved to their own section,
 or moved to the 'cove-component' styles directly. (Rob)
 !!!!!!!!

 .type-sparkline class used for creating sparklines
 once v2 is released plz update html structure
 to use .cove
*/

.markup-include,
.type-waffle-chart,
.type-data-bite,
.cdc-open-viz-module.type-chart.type-sparkline,
.cove {
  @each $theme-name, $theme-colors in $theme {
    // Header
    .theme-#{$theme-name} {
      background-color: string.unquote(nth($theme-colors, 1));
      border-color: string.unquote(nth($theme-colors, 2));
    }

    &.theme-#{$theme-name} {
      .cove-component__content:not(.no-borders).component--has-borderColorTheme {
        border-left: 1px solid string.unquote(nth($theme-colors, 1));
        border-right: 1px solid string.unquote(nth($theme-colors, 1));
        border-bottom: 1px solid string.unquote(nth($theme-colors, 1));
      }

      // when component doesn't have a title add border top
      .cove-component__inner:not(.component--has-title) .cove-component__content.component--has-borderColorTheme:not(.no-borders) {
        border-top: 1px solid string.unquote(nth($theme-colors, 1));
      }

      .cove-component__inner:not(.component--has-title) .cove-component__content {
        border-top: 1px solid #ccc;
      }

      .cove-component__header {
        border-color: string.unquote(nth($theme-colors, 2));
      }

      .cove-component__content.component--has-accent {
        border-left: 0.5rem solid string.unquote(nth($theme-colors, 1)) !important;
      }

      .cove-component__content.component--has-background:not(.component--hideBackgroundColor) {
        background: string.unquote(nth($theme-colors, 3));
      }

      .cove-component__content:not(.no-borders).component--has-borderColorTheme {
        border-left: 1px solid string.unquote(nth($theme-colors, 1));
        border-right: 1px solid string.unquote(nth($theme-colors, 1));
        border-bottom: 1px solid string.unquote(nth($theme-colors, 1));
      }

      // when component doesn't have a title add border top
      .cove-component__inner:not(.component--has-title) .cove-component__content.component--has-borderColorTheme:not(.no-borders) {
        border-top: 1px solid string.unquote(nth($theme-colors, 1));
      }

      // should probably be in color definitions but logically makes sense here.
      .cove-component__inner:not(.component--has-title) .cove-component__content {
        border-top: 1px solid #ccc;
      }

      .cove-component__header {
        border-color: string.unquote(nth($theme-colors, 2));
      }

      .cove-component__content.component--has-accent {
        border-left: 0.5rem solid string.unquote(nth($theme-colors, 1)) !important;
      }

      .cove-component__content.component--has-background:not(.component--hideBackgroundColor) {
        background: string.unquote(nth($theme-colors, 3));
      }
    }
  }
}
