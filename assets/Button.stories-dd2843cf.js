import{r as y}from"./index-18f6e4ac.js";import{M as k,C as s,S as a,A as L}from"./index-41cddf45.js";import{B as t}from"./Button-ae9020f6.js";import{j as e,a as r,F as u}from"./jsx-runtime-f14b59b8.js";import{u as g}from"./index-093f7bde.js";import"./_commonjsHelpers-53f7dec1.js";import"./iframe-1badc4b0.js";import"../sb-preview/runtime.mjs";import"./index-6820418a.js";import"./index-3e075a63.js";import"./index-8052939a.js";import"./index-87c76d85.js";import"./index-f4cbaf5b.js";import"./index-edb31f89.js";import"./index-780fc102.js";import"./LoadSpin-552b11ee.js";const d=({...o})=>e(t,{...o});const b=({...o})=>r(u,{children:[e(t,{children:"Default"}),e(t,{className:"cove-button--success",children:"Success"}),e(t,{className:"cove-button--warn",children:"Warning"}),e(t,{className:"cove-button--muted",children:"Muted"})]});const S=({...o})=>e(t,{style:{padding:"14px 8px",fontSize:"12px",minWidth:"unset",borderTopLeftRadius:"20px",borderBottomRightRadius:"10px"},children:"Custom CSS Styles"});const f=({...o})=>r(u,{children:[e(t,{hoverStyle:{backgroundColor:"yellow",color:"blue"},children:"String Values"}),e(t,{style:{maxWidth:"unset",padding:"1rem",backgroundColor:"red",color:"black"},hoverStyle:{padding:"1rem 3rem",backgroundColor:"purple",color:"white"},children:"Array Values"})]});function H(o={}){const{wrapper:l}=Object.assign({},g(),o.components);return l?e(l,{...o,children:e(i,{})}):i();function i(){const n=Object.assign({h1:"h1",h2:"h2",p:"p",ul:"ul",li:"li",em:"em",code:"code",h3:"h3"},g(),o.components);return r(u,{children:[e(k,{title:"Components/Element/Button",component:t}),"\n",e(n.h1,{children:"Button Component"}),"\n",e("p",{children:"Use the Button component to provide users with a method to interface with a major component, or trigger certain\nactions."}),"\n",e(s,{sourceState:"shown",withSource:"open",children:e(a,{name:"Example",args:{children:"Button Text",fluid:false,disabled:false,flexCenter:false},children:d.bind({})})}),"\n",e(L,{story:"Example"}),"\n",e("br",{}),"\n",e("br",{}),"\n",e(n.h2,{children:"Loader Displays"}),"\n",e(n.p,{children:"The Button component can also serve as a dynamic display for a variety of interactive event states:"}),"\n",r(n.ul,{children:["\n",e(n.li,{children:"Loading a file"}),"\n",e(n.li,{children:'After clicking "save"'}),"\n",e(n.li,{children:"Awaiting any asynchronous operation(s) to complete"}),"\n"]}),"\n",r(n.p,{children:["This display can be toggled on/off by passing a ",e(n.em,{children:"boolean"})," value to the ",e(n.code,{children:"disabled"})," property."]}),"\n",e(s,{children:e(a,{name:"Loader",children:()=>{const[T,p]=y.useState(false);const w=()=>{p(true);setTimeout(()=>{p(false)},1e3);return};return e(t,{role:"loader",disabled:T,loadingText:"Saving your changes...",onClick:()=>w(),children:"Click To Save"})}})}),"\n",e("br",{}),"\n",e(n.h2,{children:"Styling Options"}),"\n",e("br",{}),"\n",e(n.h3,{children:"Classes"}),"\n",e(n.p,{children:"The Button component has several, basic color classes that can be applied out of the box."}),"\n",e(s,{sourceState:"hidden",children:e(a,{name:"Classes",children:b.bind({})})}),"\n",e("br",{}),"\n",e(n.h3,{children:"Fluid (Fullwidth)"}),"\n",r(n.p,{children:["The Button component can be made fullwidth inside it's containing parent, or a page by adding the ",e(n.code,{children:"fluid"})," property."]}),"\n",e(s,{sourceState:"hidden",children:e(a,{name:"Fluid",args:{fluid:true,children:"Fluid Button"},children:d.bind({})})}),"\n",e("br",{}),"\n",e(n.h3,{children:"Custom Styles"}),"\n",e(n.p,{children:"Button component styles can be overwritten, just like any other element."}),"\n",e(s,{sourceState:"hidden",children:e(a,{name:"Custom Styles",children:S.bind({})})}),"\n",e("br",{}),"\n",e(n.h3,{children:"Custom Hover Styles"}),"\n",r(n.p,{children:["You can also add custom hover styles to the button. The ",e(n.code,{children:"hoverStyle"})," property will accept an object with style definitions. These will overwrite any styles defined previously through the ",e(n.code,{children:"style"})," property when the element is hovered."]}),"\n",e(s,{sourceState:"hidden",children:e(a,{name:"Custom Hover Styles",children:f.bind({})})})]})}}const m=d.bind({});m.storyName="Example";m.args={children:"Button Text",fluid:false,disabled:false,flexCenter:false};m.parameters={storySource:{source:"({ ...args\n}) => <Button {...args} />"}};const C=()=>{const[o,l]=y.useState(false);const i=()=>{l(true);setTimeout(()=>{l(false)},1e3);return};return e(t,{role:"loader",disabled:o,loadingText:"Saving your changes...",onClick:()=>i(),children:"Click To Save"})};C.storyName="Loader";C.parameters={storySource:{source:'() => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const loadingHandler = () => {\n    setIsLoading(true);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 1000);\n    return;\n  };\n\n  return <Button role="loader" disabled={isLoading} loadingText="Saving your changes..." onClick={() => loadingHandler()}>\n        Click To Save\n      </Button>;\n}'}};const v=b.bind({});v.storyName="Classes";v.parameters={storySource:{source:'({ ...args\n}) => <>\n    <Button>Default</Button>\n    <Button className="cove-button--success">Success</Button>\n    <Button className="cove-button--warn">Warning</Button>\n    <Button className="cove-button--muted">Muted</Button>\n  </>'}};const h=d.bind({});h.storyName="Fluid";h.args={fluid:true,children:"Fluid Button"};h.parameters={storySource:{source:"({ ...args\n}) => <Button {...args} />"}};const B=S.bind({});B.storyName="Custom Styles";B.parameters={storySource:{source:'({ ...args\n}) => <Button style={{\n  padding: "14px 8px",\n  fontSize: "12px",\n  minWidth: "unset",\n  borderTopLeftRadius: "20px",\n  borderBottomRightRadius: "10px"\n}}>\n    Custom CSS Styles\n  </Button>'}};const x=f.bind({});x.storyName="Custom Hover Styles";x.parameters={storySource:{source:'({ ...args\n}) => <>\n    <Button hoverStyle={{\n    backgroundColor: "yellow",\n    color: "blue"\n  }}>\n      String Values\n    </Button>\n    <Button style={{\n    maxWidth: "unset",\n    padding: "1rem",\n    backgroundColor: "red",\n    color: "black"\n  }} hoverStyle={{\n    padding: "1rem 3rem",\n    backgroundColor: "purple",\n    color: "white"\n  }}>\n      Array Values\n    </Button>\n  </>'}};const c={title:"Components/Element/Button",component:t,tags:["stories-mdx"],includeStories:["example","loader","classes","fluid","customStyles","customHoverStyles"]};c.parameters=c.parameters||{};c.parameters.docs={...c.parameters.docs||{},page:H};const Y=["Template","Classes","CustomClasses","CustomHover","example","loader","classes","fluid","customStyles","customHoverStyles"];export{b as Classes,S as CustomClasses,f as CustomHover,d as Template,Y as __namedExportsOrder,v as classes,x as customHoverStyles,B as customStyles,c as default,m as example,h as fluid,C as loader};
//# sourceMappingURL=Button.stories-dd2843cf.js.map
