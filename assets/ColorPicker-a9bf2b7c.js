import{a as y,F as m,j as a}from"./jsx-runtime-f14b59b8.js";import"./index-18f6e4ac.js";import{u}from"./useVisConfig-a08e56f4.js";import{p as r}from"./index-780fc102.js";import{L as q}from"./Label-8ac46115.js";import{T as f}from"./Tooltip-8b5fc730.js";import{C as g}from"./store-bae56153.js";const s={"blue":{primary:"#005eaa",secondary:"#88c3ea",tertiary:"#c0e9ff",quaternary:"#edf9ff"},"purple":{primary:"#712177",secondary:"#b890bb",tertiary:"#e3d3e4",quaternary:"#f7f2f7"},"brown":{primary:"#705043",secondary:"#ad907b",tertiary:"#d7ccc8",quaternary:"#f2ebe8"},"teal":{primary:"#00695c",secondary:"#4ebaaa",tertiary:"#ceece7",quaternary:"#ebf7f5"},"pink":{primary:"#af4448",secondary:"#e57373",tertiary:"#ffc2c2",quaternary:"#ffe7e7"},"orange":{primary:"#bb4d00",secondary:"#ffad42",tertiary:"#ffe97d",quaternary:"#fff4cf"},"slate":{primary:"#29434e",secondary:"#7e9ba5",tertiary:"#b6c6d2",quaternary:"#e2e8ed"},"indigo":{primary:"#26418f",secondary:"#92a6dd",tertiary:"#dee8ff",quaternary:"#f2f6ff"},"cyan":{primary:"#006778",secondary:"#65b0bd",tertiary:"#cce5e9",quaternary:"#ebf5f6"},"green":{primary:"#4b830d",secondary:"#84bc49",tertiary:"#dcedc8",quaternary:"#f1f8e9"},"amber":{primary:"#fbab18",secondary:"#ffd54f",tertiary:"#ffecb3",quaternary:"#fff7e1"}};const l=({color:n})=>{const{config:o,updateVisConfigField:c}=u();const i=n===o.theme&&{"data-selected":true};return y("button",{className:"cove-color-picker__button",...i,onClick:()=>{c("theme",n)},children:[a("div",{className:"cove-color-picker__color",style:{backgroundColor:s[n].primary}}),a("div",{className:"cove-color-picker__color--ring"})]})};const p=({label:n,colors:o=s,tooltip:c,colorTooltip:i})=>{const d=e=>{if(e.constructor===Object){let t=[];Object.entries(s).forEach(([b,h])=>t.push(b));return t}else if(e.constructor===Array){return e}else{console.error("Unable to parse colors. Color data must be provided as either an object or an array.");return[]}};return y(m,{children:[n&&a(q,{tooltip:c,children:n}),a("div",{className:"cove-color-picker",children:i?d(o).map((e,t)=>y(f,{place:"bottom",children:[a(f.Target,{children:a(l,{color:e})}),a(f.Content,{children:g.String.capitalizeFirstLetter(e)})]},t)):d(o).map((e,t)=>a(l,{color:e},t))})]})};p.propTypes={label:r.string,colors:r.oneOfType([r.array,r.object]),tooltip:r.oneOfType([r.string,r.object]),colorTooltip:r.bool};p.__docgenInfo={"description":"","methods":[],"displayName":"ColorPicker","props":{"colors":{"defaultValue":{"value":"{\n  'blue': {\n    primary: '#005eaa',\n    secondary: '#88c3ea',\n    tertiary: '#c0e9ff',\n    quaternary: '#edf9ff'\n  },\n  'purple': {\n    primary: '#712177',\n    secondary: '#b890bb',\n    tertiary: '#e3d3e4',\n    quaternary: '#f7f2f7'\n  },\n  'brown': {\n    primary: '#705043',\n    secondary: '#ad907b',\n    tertiary: '#d7ccc8',\n    quaternary: '#f2ebe8'\n  },\n  'teal': {\n    primary: '#00695c',\n    secondary: '#4ebaaa',\n    tertiary: '#ceece7',\n    quaternary: '#ebf7f5'\n  },\n  'pink': {\n    primary: '#af4448',\n    secondary: '#e57373',\n    tertiary: '#ffc2c2',\n    quaternary: '#ffe7e7'\n  },\n  'orange': {\n    primary: '#bb4d00',\n    secondary: '#ffad42',\n    tertiary: '#ffe97d',\n    quaternary: '#fff4cf'\n  },\n  'slate': {\n    primary: '#29434e',\n    secondary: '#7e9ba5',\n    tertiary: '#b6c6d2',\n    quaternary: '#e2e8ed'\n  },\n  'indigo': {\n    primary: '#26418f',\n    secondary: '#92a6dd',\n    tertiary: '#dee8ff',\n    quaternary: '#f2f6ff'\n  },\n  'cyan': {\n    primary: '#006778',\n    secondary: '#65b0bd',\n    tertiary: '#cce5e9',\n    quaternary: '#ebf5f6'\n  },\n  'green': {\n    primary: '#4b830d',\n    secondary: '#84bc49',\n    tertiary: '#dcedc8',\n    quaternary: '#f1f8e9'\n  },\n  'amber': {\n    primary: '#fbab18',\n    secondary: '#ffd54f',\n    tertiary: '#ffecb3',\n    quaternary: '#fff7e1'\n  }\n}","computed":false},"type":{"name":"union","value":[{"name":"array"},{"name":"object"}]},"required":false,"description":"Define the color options to be generated:\n<br/>- `Array` will generate the list based off each entry\n<br/>- `Object` will generate the list based off a `key: value` = `colorName: colorValue` correlation\n<br/><br/>"},"label":{"type":{"name":"string"},"required":false,"description":"Add label for the ColorPicker component"},"tooltip":{"type":{"name":"union","value":[{"name":"string"},{"name":"object"}]},"required":false,"description":"Add a tooltip to describe the ColorPicker's usage; JSX markup can also be supplied"},"colorTooltip":{"type":{"name":"bool"},"required":false,"description":"Display a tooltip defining the value of a focused color"}}};export{p as C,s as a};
//# sourceMappingURL=ColorPicker-a9bf2b7c.js.map
