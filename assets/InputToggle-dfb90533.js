import{a as f,F as S,j as l}from"./jsx-runtime-670450c2.js";import{r}from"./index-f1f749bf.js";import{p as t}from"./index-4d501b15.js";import{u as L}from"./useVisConfig-4fe3448c.js";import{g as w}from"./visConfigSlice-bf7622bc.js";import{L as A}from"./Label-e733889d.js";/* empty css              */const y=r.memo(({label:u,labelPosition:n="right",tooltip:x,toggleType:C="flat",size:k="small",activeColor:g="#005eaa",stretch:V,configField:a,value:q,className:m,onClick:v,...z})=>{const{config:N,updateVisConfigField:h}=L(),[o,p]=r.useState(!1),_=r.useRef(null),s=a&&w(a,N),b=Boolean(s&&typeof s!==void 0);r.useEffect(()=>{b?s!==o&&p(s):p(q)},[b]),r.useEffect(()=>{a&&o!==s&&h(a,o)},[a,o,h]);const c=()=>_.current.click(),T=e=>{p(i=>!i),v&&v(e)},j=()=>{const e=[],i="cove-input__toggle-group";return e.push(i),V&&e.push("cove-input__toggle-group--stretch"),m&&e.push(m),e.join(" ")},E=()=>{const e=[],i="cove-input__toggle",I={small:"",medium:"--medium",large:"--large",xlarge:"--xlarge"};e.push(i+I[k]);const O={flat:"cove-input__toggle--flat",block:"cove-input__toggle--block",pill:"cove-input__toggle--pill","3d":"cove-input__toggle--3d"};return e.push(O[C]||""),o&&e.push("cove-input__toggle--active"),e.join(" ")},d=()=>l("div",{className:"cove-input__toggle-group__label",children:l(A,{tooltip:x,onClick:c,children:u})});return f(S,{children:[u&&n==="top"&&l(d,{}),f("div",{className:j(),flow:n,children:[u&&n==="left"&&l(d,{}),f("div",{className:E(),tabIndex:0,onKeyUp:e=>{(e.code==="Enter"||e.code==="NumpadEnter"||e.code==="Space")&&c()},onClick:c,children:[l("div",{className:"cove-input__toggle-spacer"}),l("div",{className:"cove-input__toggle-button"}),l("div",{className:"cove-input__toggle-track",style:o&&g?{backgroundColor:g}:null}),l("input",{className:"cove-input--hidden",type:"checkbox",defaultChecked:o,onChange:e=>T(e),ref:_,tabIndex:-1,readOnly:!0})]}),u&&n==="right"&&l(d,{})]})]})});y.propTypes={label:t.string,labelPosition:t.oneOf(["left","right","top"]),tooltip:t.oneOfType([t.string,t.object]),toggleType:t.oneOf(["flat","block","pill","3d"]),size:t.oneOf(["small","medium","large","xlarge"]),activeColor:t.string,stretch:t.bool,stateValue:t.bool};y.__docgenInfo={description:"",methods:[],displayName:"InputToggle",props:{labelPosition:{defaultValue:{value:"'right'",computed:!1},type:{name:"enum",value:[{value:"'left'",computed:!1},{value:"'right'",computed:!1},{value:"'top'",computed:!1}]},required:!1,description:"Position the label relative to the toggle"},toggleType:{defaultValue:{value:"'flat'",computed:!1},type:{name:"enum",value:[{value:"'flat'",computed:!1},{value:"'block'",computed:!1},{value:"'pill'",computed:!1},{value:"'3d'",computed:!1}]},required:!1,description:"Select the preferred display style of the toggle"},size:{defaultValue:{value:"'small'",computed:!1},type:{name:"enum",value:[{value:"'small'",computed:!1},{value:"'medium'",computed:!1},{value:"'large'",computed:!1},{value:"'xlarge'",computed:!1}]},required:!1,description:"Select the preferred size of the toggle"},activeColor:{defaultValue:{value:"'#005eaa'",computed:!1},type:{name:"string"},required:!1,description:"Select the preferred color for the toggle when active"},label:{type:{name:"string"},required:!1,description:"Add label to the input field"},tooltip:{type:{name:"union",value:[{name:"string"},{name:"object"}]},required:!1,description:"Add a tooltip to describe the toggle's usage; JSX markup can also be supplied"},stretch:{type:{name:"bool"},required:!1,description:"Stretch the toggle and its label to fill the width of its container; Only available when label exists, and **labelPosition** is set to `left` or `right`."},stateValue:{type:{name:"bool"},required:!1,description:"Current value of the input, usually the current config option value"}}};export{y as I};
//# sourceMappingURL=InputToggle-dfb90533.js.map
