{"version":3,"file":"ListGroup.stories-b22a4dda.js","sources":["../../packages/core/components/element/ListGroup.jsx","../../packages/core/components/element/_stories/ListGroup.stories.mdx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\n\n// Third Party\nimport PropTypes from 'prop-types'\n\n// Store\nimport useConfigStore from '../../store/config/visConfigSlice'\n\n// Components\nimport Icon from '../ui/Icon'\nimport InputSelect from '../input/InputSelect'\nimport Label from './Label'\nimport Tooltip from '../ui/Tooltip'\n\n// Styles\nimport '../../styles/v2/components/element/list-group.scss'\n\nconst MAX_TEXT_WIDTH = 250\nconst MAX_TEXT_SELECT_WIDTH = 150\n\nconst capitalizeFirstLetter = (string) => string.charAt(0).toUpperCase() + string.slice(1)\n\nconst hasKeyValue = (value) => value === Object(value)\n\nconst returnObjKeyValue = (key, obj) => {\n  let value = Object.keys(obj).map(entry => entry === key ? obj[key] : null)\n  return value[0]\n}\n\nconst ListGroupItem = ({ textValueKey, listData, canClear, options, optionsSection, optionsSubsection, removeAction, index }) => {\n  // Store Selectors\n  const { updateConfigField } = useConfigStore()\n\n  const [ textWidth, setTextWidth ] = useState(0)\n\n  useEffect(() => {\n    //Create shadow object and text nodes for children\n    const shadowSpan = document.createElement('span')\n    shadowSpan.style.opacity = '0'\n    shadowSpan.style.visibility = 'hidden'\n    shadowSpan.style.position = 'absolute'\n\n    //Append data to shadow objects\n    shadowSpan.appendChild(document.createTextNode(textValueKey))\n\n    //Append objects to document\n    document.body.appendChild(shadowSpan)\n\n    //Register ghost width values in state\n    setTextWidth(shadowSpan.offsetWidth)\n\n    //Remove ghost objects from document\n    document.body.removeChild(shadowSpan)\n  }, [])\n\n  const isOverflow = () => options ? textWidth > MAX_TEXT_SELECT_WIDTH : textWidth > MAX_TEXT_WIDTH\n\n  const onChangeHandler = (e) => {\n    let listArr = [ ...listData ]\n    listArr[index][optionsSubsection] = e.target.value\n    updateConfigField([optionsSection, optionsSubsection], { ...listArr })\n  }\n\n  return (\n    <li className={`cove-list-group__item${options ? ' cove-list-group__item--has-option' : ''}${isOverflow() ? ' cove-list-group__item--truncate' : ''}`}>\n      <div className=\"cove-list-group__item-value\">\n        {isOverflow()\n          ?\n            <Tooltip float={true}>\n              <Tooltip.Target>\n                <div className=\"cove-list-group__item-value__text\">{capitalizeFirstLetter(textValueKey)}</div>\n              </Tooltip.Target>\n              <Tooltip.Content>{capitalizeFirstLetter(textValueKey)}</Tooltip.Content>\n            </Tooltip>\n          :\n            <div className=\"cove-list-group__item-value__text\">{capitalizeFirstLetter(textValueKey)}</div>\n        }\n      </div>\n      <div className=\"cove-list-group__item-children\">\n        {options &&\n          <InputSelect className=\"mr-1\" options={options[0]} style={{ width: '100px' }} onChange={e => onChangeHandler(e)}/>\n        }\n        {removeAction && (canClear || listData.length > 1) &&\n          <div className=\"cove-list-group__item-remove\">\n            <Icon display=\"close\" size={16} onClick={() => removeAction(textValueKey)}/>\n          </div>\n        }\n      </div>\n    </li>\n  )\n}\n\nconst ListGroup = ({ label, tooltip, items, textValueKey, canClear = true, options, optionsSection, optionsSubsection, removeAction }) => {\n  const [ listData, setListData ] = useState(items)\n\n  useEffect(() => {\n    setListData(items)\n  }, [ items ])\n\n  const itemsToJsx = (items) => {\n    let itemsJsx = []\n\n    if (items) {\n      items.map((itemValue, index) => {\n        //Check if item group is an array of strings, or an array of objects\n\n        //Array of Objects -----\n        //If item group is an array of objects, grab the object's first key value for the list item value\n        if (hasKeyValue(itemValue)) {\n          //It's an object, so grab the entry value using the user defined key - this will be used for the text value\n          let textValue = returnObjKeyValue(textValueKey, itemValue)\n          return (\n            itemsJsx.push(\n              <ListGroupItem textValueKey={textValue} listData={listData} canClear={canClear}\n                             options={options} optionsSection={optionsSection} optionsSubsection={optionsSubsection}\n                             removeAction={removeAction}\n                             index={index} key={index}\n              />\n            )\n          )\n        }\n\n        //Array of Strings -----\n        //If item group is an array of strings, just grab the string for the list item value\n        return (\n          itemsJsx.push(\n            <ListGroupItem textValueKey={itemValue} listData={listData} canClear={canClear} removeAction={removeAction} key={index}/>\n          )\n        )\n      })\n    }\n    return itemsJsx\n  }\n\n  return (\n    <>\n      {label && <Label tooltip={tooltip ? tooltip : null}>{label}</Label>}\n      <ul className=\"cove-list-group\">\n        {items && itemsToJsx(items)}\n      </ul>\n    </>\n  )\n}\n\nListGroup.propTypes = {\n  /** Supply a label for the ListGroup */\n  label: PropTypes.string,\n  /** Allow all items from the list to be removed. Set `false` to force at least 1 to remain */\n  canClear: PropTypes.bool,\n  /** Supply the key name containing the value to be used when populating the text value */\n  textValueKey: PropTypes.string,\n  /** Array list of values for additional dropdown selections on each list item */\n  options: PropTypes.array,\n  /** First config key value to target when updating the option of the dropdown  */\n  optionsSection: PropTypes.string,\n  /** Second, nested config key value to target when updating the option of the dropdown  */\n  optionsSubsection: PropTypes.string,\n  /** Callback function to trigger when removing an item from the ListGroup */\n  removeAction: PropTypes.func,\n  /** Array of strings, or objects, used to populate the list. If objects are used, each entry's key is set to the text and the value is set to the value of  */\n  items: PropTypes.array,\n  /** Add a tooltip to describe the ListGroup's usage; JSX markup can also be supplied */\n  tooltip: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object\n  ]),\n}\n\nexport default ListGroup\n","import { Canvas, Meta, Story, ArgsTable } from '@storybook/blocks';\n\nimport ListGroup from '../ListGroup'\n\n<Meta\n  title=\"Components/Element/ListGroup-WIP\"\n  component={ListGroup}\n/>\n\n# ListGroup Component (WIP)\n\nUsed to display a list of items from a pre-populated array that can be acted upon, specifically for removing an item from the initial array.\n\n<Canvas sourceState=\"shown\" withSource=\"open\">\n  <Story name=\"Example\" args={{\n    label: \"State Values\",\n    canClear: true,\n    options: ['Line', 'Bar', 'Wave'],\n    removeAction: () => alert('Removed'),\n    items: ['test','test2',\"test3\"],\n    tooltip: \"This is an <strong>example</strong> tooltip.\"\n  }}>\n    {Template.bind({})}\n  </Story>\n</Canvas>\n\n<ArgsTable story=\"Example\"/>\n\nexport const Template = ({ ...args }) => <ListGroup {...args}/>\n"],"names":["MAX_TEXT_WIDTH","MAX_TEXT_SELECT_WIDTH","capitalizeFirstLetter","string","hasKeyValue","value","returnObjKeyValue","key","obj","entry","ListGroupItem","textValueKey","listData","canClear","options","optionsSection","optionsSubsection","removeAction","index","updateConfigField","useConfigStore","textWidth","setTextWidth","useState","useEffect","shadowSpan","isOverflow","onChangeHandler","e","listArr","jsxs","jsx","Tooltip","InputSelect","Icon","ListGroup","label","tooltip","items","setListData","Fragment","Label","itemsJsx","itemValue","textValue","PropTypes","Template","args","_jsx","MDXContent","props","MDXLayout","_provideComponents","_createMdxContent","_components","_jsxs","_Fragment","Meta","Canvas","Story","ArgsTable","example","componentMeta","__namedExportsOrder"],"mappings":"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"}