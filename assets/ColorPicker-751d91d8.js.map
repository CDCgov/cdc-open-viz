{"version":3,"file":"ColorPicker-751d91d8.js","sources":["../../packages/core/data/componentThemes.js","../../packages/core/helpers/coveHelpers.js","../../packages/core/components/ui/ColorPicker.jsx"],"sourcesContent":["const COMPONENT_THEMES = {\n  'blue': {\n    primary: '#005eaa',\n    secondary: '#88c3ea',\n    tertiary: '#c0e9ff',\n    quaternary: '#edf9ff'\n  },\n  'purple': {\n    primary: '#712177',\n    secondary: '#b890bb',\n    tertiary: '#e3d3e4',\n    quaternary: '#f7f2f7'\n  },\n  'brown': {\n    primary: '#705043',\n    secondary: '#ad907b',\n    tertiary: '#d7ccc8',\n    quaternary: '#f2ebe8'\n  },\n  'teal': {\n    primary: '#00695c',\n    secondary: '#4ebaaa',\n    tertiary: '#ceece7',\n    quaternary: '#ebf7f5'\n  },\n  'pink': {\n    primary: '#af4448',\n    secondary: '#e57373',\n    tertiary: '#ffc2c2',\n    quaternary: '#ffe7e7'\n  },\n  'orange': {\n    primary: '#bb4d00',\n    secondary: '#ffad42',\n    tertiary: '#ffe97d',\n    quaternary: '#fff4cf'\n  },\n  'slate': {\n    primary: '#29434e',\n    secondary: '#7e9ba5',\n    tertiary: '#b6c6d2',\n    quaternary: '#e2e8ed'\n  },\n  'indigo': {\n    primary: '#26418f',\n    secondary: '#92a6dd',\n    tertiary: '#dee8ff',\n    quaternary: '#f2f6ff'\n  },\n  'cyan': {\n    primary: '#006778',\n    secondary: '#65b0bd',\n    tertiary: '#cce5e9',\n    quaternary: '#ebf5f6'\n  },\n  'green': {\n    primary: '#4b830d',\n    secondary: '#84bc49',\n    tertiary: '#dcedc8',\n    quaternary: '#f1f8e9'\n  },\n  'amber': {\n    primary: '#fbab18',\n    secondary: '#ffd54f',\n    tertiary: '#ffecb3',\n    quaternary: '#fff7e1'\n  }\n}\n\nexport default COMPONENT_THEMES\n","import { timeFormat, timeParse } from 'd3-time-format'\n\n// General ------------------------------------------------------------------------------------------------\nconst getViewport = (size) => {\n  const viewports = { 'lg': 1280, 'md': 992, 'sm': 768, 'xs': 576, 'xxs': 350 }\n  let result = 'xl'\n  if (size > 1200) return result\n  for (let viewport in viewports) if (size <= viewports[viewport]) result = viewport\n  return result\n}\n\n// Strings ------------------------------------------------------------------------------------------------\nconst cacheBustingString = () => {\n  const round = 1000 * 60 * 15\n  const date = new Date()\n  return new Date(date.getTime() - (date.getTime() % round)).toISOString()\n}\n\nconst numberFromString = (value) => {\n  let nonNumeric = /[^\\d.-]/g\n  if (false === Number.isNaN(parseFloat(value)) && null === String(value).match(nonNumeric)) return parseFloat(value)\n  return value\n}\n\nconst capitalizeFirstLetter = (string) => string.charAt(0).toUpperCase() + string.slice(1)\n\n// Dates ------------------------------------------------------------------------------------------------\nconst formatDate = (format = undefined, date) => (timeFormat(format)(date))\nconst parseDate = (format = undefined, dateString) => (timeParse(format)(dateString) || new Date())\n\n// Math ------------------------------------------------------------------------------------------------\nconst getSum = (arr) => {\n  if (Array.isArray(arr) && arr.length > 0) {\n    return arr.reduce((sum, x) => sum + x)\n  }\n}\n\nconst getMean = (arr) => {\n  return arr.length > 1 ? arr.reduce((a, b) => a + b) / arr.length : arr[0]\n}\n\nconst getMedian = (arr) => {\n  const mid = Math.floor(arr.length / 2)\n  const nums = [ ...arr ].sort((a, b) => a - b)\n\n  return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2\n}\n\nconst getMode = (arr) => {\n  let response = []\n  let freq = {}\n  let max = -Infinity\n\n  for (let i = 0; i < arr.length; i++) {\n    if (freq[arr[i]]) {\n      freq[arr[i]] += 1\n    } else {\n      // If index entry doesn't exist, start at 1 instead of 0\n      freq[arr[i]] = 1\n    }\n    if (freq[arr[i]] > max) max = freq[arr[i]]\n  }\n  for (let key in freq) if (freq[key] === max) response.push(key)\n  return response\n}\n\nconst applyPrecision = (value, roundToPlace) => {\n  if ('' !== roundToPlace && !isNaN(roundToPlace) && Number(roundToPlace) > -1) {\n    value = Number(value).toFixed(Number(roundToPlace))\n  }\n  return value\n}\n\n// Events ------------------------------------------------------------------------------------------------\nconst subscribe = (eventName, listener) => document.addEventListener(eventName, listener)\n\nconst unsubscribe = (eventName, listener) => document.removeEventListener(eventName, listener)\n\nconst publish = (eventName, data) => {\n  const event = new CustomEvent(eventName, { detail: data })\n  document.dispatchEvent(event)\n}\n\nexport {\n  // General\n  getViewport,\n\n  // Strings\n  cacheBustingString,\n  numberFromString,\n  capitalizeFirstLetter,\n\n  // Date\n  formatDate,\n  parseDate,\n\n  // Math\n  getSum,\n  getMean,\n  getMedian,\n  getMode,\n  applyPrecision,\n\n  // Events\n  subscribe,\n  unsubscribe,\n  publish\n}\n","// Store\nimport { useConfigStore } from '../../stores/configStore'\n\n// Third Party\nimport PropTypes from 'prop-types'\n\n// Components\nimport Label from '../element/Label'\nimport Tooltip from './Tooltip'\n\n// Data\n// -- Theme colors are loaded externally from pre-defined object.\nimport THEME_COLORS from '../../data/componentThemes'\n\n// Helpers\nimport { capitalizeFirstLetter } from '../../helpers/coveHelpers'\n\n// Styles\nimport '../../styles/v2/components/ui/color-picker.scss'\n\nconst ColorButton = ({ color }) => {\n  const { config, updateConfig } = useConfigStore()\n\n  const customAttrs = color === config.theme && { 'data-selected': true }\n\n  return (\n    <button className=\"cove-color-picker__button\" {...customAttrs} onClick={() => {\n      updateConfig({ theme: color })\n    }}>\n      <div className=\"cove-color-picker__color\" style={{ backgroundColor: THEME_COLORS[color].primary }}/>\n      <div className=\"cove-color-picker__color--ring\"/>\n    </button>\n  )\n}\n\nconst ColorPicker = ({ label, colors = THEME_COLORS, tooltip, colorTooltip }) => {\n  const parseColors = (colors) => {\n    if (colors.constructor === Object) {\n      let arr = []\n      Object.entries(THEME_COLORS).forEach(([ theme, colors ]) => arr.push(theme))\n      return arr\n    } else if (colors.constructor === Array) {\n      return colors\n    } else {\n      console.error('Unable to parse colors. Color data must be provided as either an object or an array.')\n      return []\n    }\n  }\n\n  return (\n    <>\n      {label && <Label tooltip={tooltip}>{label}</Label>}\n      <div className=\"cove-color-picker\">\n        {/* Use two separate maps to resolve key warnings */}\n        {colorTooltip ?\n          parseColors(colors).map((color, index) => (\n            <Tooltip position=\"bottom\" key={index}>\n              <Tooltip.Target>\n                <ColorButton color={color}/>\n              </Tooltip.Target>\n              <Tooltip.Content>{capitalizeFirstLetter(color)}</Tooltip.Content>\n            </Tooltip>\n          )) :\n          parseColors(colors).map((color, index) => (\n            <ColorButton color={color} key={index}/>\n          ))\n        }\n      </div>\n    </>\n  )\n}\n\nColorPicker.propTypes = {\n  /** Add label for the ColorPicker component */\n  label: PropTypes.string,\n  /** Define the color options to be generated:\n   * <br/>- `Array` will generate the list based off each entry\n   * <br/>- `Object` will generate the list based off a `key: value` = `colorName: colorValue` correlation\n   * <br/><br/> */\n  colors: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.object\n  ]),\n  /** Add a tooltip to describe the ColorPicker's usage; JSX markup can also be supplied */\n  tooltip: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object\n  ]),\n  /** Display a tooltip defining the value of a focused color */\n  colorTooltip: PropTypes.bool\n}\n\nexport default ColorPicker\n"],"names":["COMPONENT_THEMES","capitalizeFirstLetter","string","getSum","arr","sum","x","getMean","a","b","getMedian","mid","nums","getMode","response","freq","max","i","key","applyPrecision","value","roundToPlace","ColorButton","color","config","updateConfig","useConfigStore","customAttrs","jsx","THEME_COLORS","ColorPicker","label","colors","tooltip","colorTooltip","parseColors","theme","jsxs","Fragment","Label","index","Tooltip","PropTypes"],"mappings":"oOAAK,MAACA,EAAmB,CACvB,KAAQ,CACN,QAAS,UACT,UAAW,UACX,SAAU,UACV,WAAY,SACb,EACD,OAAU,CACR,QAAS,UACT,UAAW,UACX,SAAU,UACV,WAAY,SACb,EACD,MAAS,CACP,QAAS,UACT,UAAW,UACX,SAAU,UACV,WAAY,SACb,EACD,KAAQ,CACN,QAAS,UACT,UAAW,UACX,SAAU,UACV,WAAY,SACb,EACD,KAAQ,CACN,QAAS,UACT,UAAW,UACX,SAAU,UACV,WAAY,SACb,EACD,OAAU,CACR,QAAS,UACT,UAAW,UACX,SAAU,UACV,WAAY,SACb,EACD,MAAS,CACP,QAAS,UACT,UAAW,UACX,SAAU,UACV,WAAY,SACb,EACD,OAAU,CACR,QAAS,UACT,UAAW,UACX,SAAU,UACV,WAAY,SACb,EACD,KAAQ,CACN,QAAS,UACT,UAAW,UACX,SAAU,UACV,WAAY,SACb,EACD,MAAS,CACP,QAAS,UACT,UAAW,UACX,SAAU,UACV,WAAY,SACb,EACD,MAAS,CACP,QAAS,UACT,UAAW,UACX,SAAU,UACV,WAAY,SACb,CACH,EC3CMC,EAAyBC,GAAWA,EAAO,OAAO,CAAC,EAAE,cAAgBA,EAAO,MAAM,CAAC,EAOnFC,EAAUC,GAAQ,CACtB,GAAI,MAAM,QAAQA,CAAG,GAAKA,EAAI,OAAS,EACrC,OAAOA,EAAI,OAAO,CAACC,EAAKC,IAAMD,EAAMC,CAAC,CAEzC,EAEMC,EAAWH,GACRA,EAAI,OAAS,EAAIA,EAAI,OAAO,CAACI,EAAGC,IAAMD,EAAIC,CAAC,EAAIL,EAAI,OAASA,EAAI,CAAC,EAGpEM,EAAaN,GAAQ,CACzB,MAAMO,EAAM,KAAK,MAAMP,EAAI,OAAS,CAAC,EAC/BQ,EAAO,CAAE,GAAGR,GAAM,KAAK,CAACI,EAAGC,IAAMD,EAAIC,CAAC,EAE5C,OAAOL,EAAI,OAAS,IAAM,EAAIQ,EAAKD,CAAG,GAAKC,EAAKD,EAAM,CAAC,EAAIC,EAAKD,CAAG,GAAK,CAC1E,EAEME,EAAWT,GAAQ,CACvB,IAAIU,EAAW,CAAE,EACbC,EAAO,CAAE,EACTC,EAAM,KAEV,QAASC,EAAI,EAAGA,EAAIb,EAAI,OAAQa,IAC1BF,EAAKX,EAAIa,CAAC,CAAC,EACbF,EAAKX,EAAIa,CAAC,CAAC,GAAK,EAGhBF,EAAKX,EAAIa,CAAC,CAAC,EAAI,EAEbF,EAAKX,EAAIa,CAAC,CAAC,EAAID,IAAKA,EAAMD,EAAKX,EAAIa,CAAC,CAAC,GAE3C,QAASC,KAAOH,EAAUA,EAAKG,CAAG,IAAMF,GAAKF,EAAS,KAAKI,CAAG,EAC9D,OAAOJ,CACT,EAEMK,EAAiB,CAACC,EAAOC,KAClBA,IAAP,IAAuB,CAAC,MAAMA,CAAY,GAAK,OAAOA,CAAY,EAAI,KACxED,EAAQ,OAAOA,CAAK,EAAE,QAAQ,OAAOC,CAAY,CAAC,GAE7CD,GClDT,MAAAE,EAAA,CAAA,CAAA,MAAAC,KAAA,CACA,KAAA,CAAA,OAAAC,EAAA,aAAAC,CAAA,EAAAC,EAAA,EAEAC,EAAAJ,IAAAC,EAAA,OAAA,CAAA,gBAAA,IAEA,SACA,SAAA,CAAA,UAAA,4BAAA,GAAAG,EAAA,QAAA,IAAA,CACAF,EAAA,CAAA,MAAAF,CAAA,CAAA,CAEA,EAAA,SAAA,CAAAK,EAAA,MAAA,CAAA,UAAA,2BAAA,MAAA,CAAA,gBAAAC,EAAAN,CAAA,EAAA,OAAA,CAAA,CAAA,EACAK,EAAA,MAAA,CAAA,UAAA,gCAAA,CAAA,CACA,CAAA,CAAA,CAEA,EAEAE,EAAA,CAAA,CAAA,MAAAC,EAAA,OAAAC,EAAAH,EAAA,QAAAI,EAAA,aAAAC,KAAA,CACA,MAAAC,EAAAH,GAAA,CACAA,GAAAA,EAAA,cAAA,OAAA,CACA,IAAA5B,EAAA,CAAA,EACA,cAAA,QAAAyB,CAAA,EAAA,QAAA,CAAA,CAAAO,EAAAJ,CAAA,IAAA5B,EAAA,KAAAgC,CAAA,CAAA,EACAhC,CAAA,KACA,QAAA4B,EAAA,cAAA,MACAA,GAEA,QAAA,MAAA,sFAAA,EACA,GACA,EAGA,OAEAK,EAAAC,EAAA,CAAA,SAAA,CAAAP,GAAAH,EAAAW,EAAA,CAAA,QAAAN,EAAA,SAAAF,EAAA,EACAH,EAAA,MAAA,CAAA,UAAA,oBAEA,WACAO,EAAAH,CAAA,EAAA,IAAA,CAAAT,EAAAiB,IACAH,EAAAI,EAAA,CAAA,SAAA,SACA,SAAA,CAAAb,EAAAa,EAAA,OAAA,CACA,SAAAb,EAAAN,EAAA,CAAA,MAAAC,CAAA,CAAA,EACA,IACAkB,EAAA,QAAA,CAAA,SAAAxC,EAAAsB,CAAA,EAAA,CAAA,CAAA,EAJAiB,CAKA,CACA,EACAL,EAAAH,CAAA,EAAA,IAAA,CAAAT,EAAAiB,IACAZ,EAAAN,EAAA,CAAA,MAAAC,CAAA,EAAAiB,CAAA,CACA,EAEA,CACA,CAAA,CAAA,CAEA,EAEAV,EAAA,UAAA,CAEA,MAAAY,EAAA,OAKA,OAAAA,EAAA,UAAA,CACAA,EAAA,MACAA,EAAA,MAAA,CACA,EAEA,QAAAA,EAAA,UAAA,CACAA,EAAA,OACAA,EAAA,MAAA,CACA,EAEA,aAAAA,EAAA,IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}