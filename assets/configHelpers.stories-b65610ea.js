import{M as d}from"./index-41cddf45.js";import{j as n,a as r,F as l}from"./jsx-runtime-f14b59b8.js";import{u as a}from"./index-093f7bde.js";import"./iframe-1badc4b0.js";import"../sb-preview/runtime.mjs";import"./index-18f6e4ac.js";import"./_commonjsHelpers-53f7dec1.js";import"./index-6820418a.js";import"./index-3e075a63.js";import"./index-8052939a.js";import"./index-87c76d85.js";import"./index-f4cbaf5b.js";import"./index-edb31f89.js";function h(t={}){const{wrapper:i}=Object.assign({},a(),t.components);return i?n(i,{...t,children:n(c,{})}):c();function c(){const e=Object.assign({h1:"h1",p:"p",code:"code",h2:"h2",strong:"strong",ul:"ul",li:"li",em:"em",pre:"pre"},a(),t.components);return r(l,{children:[n(d,{title:"Helpers/configHelpers"}),"\n",n(e.h1,{children:"configHelpers"}),"\n",n(e.p,{children:"The configHelpers are used specifically for working with, and updating, COVE config settings inside the Store."}),"\n",r(e.p,{children:["It exports three helper functions: ",n(e.code,{children:"isConfigEqual"}),", ",n(e.code,{children:"setConfigKeyValue"}),", and ",n(e.code,{children:"getConfigKeyValue"}),":"]}),"\n",n(e.p,{children:" "}),"\n",n(e.h2,{children:"isConfigEqual(a, b)"}),"\n",r(e.p,{children:["A function that takes two arguments, ",n(e.code,{children:"a"})," and ",n(e.code,{children:"b"}),". Returns ",n(e.code,{children:"true"})," if they are equal (have the same key-value pairs), and ",n(e.code,{children:"false"})," otherwise."]}),"\n",r(e.p,{children:["The comparison is performed using ",n(e.code,{children:"JSON.stringify"})," to convert the objects to strings before comparing."]}),"\n",n(e.p,{children:n(e.strong,{children:"Parameters:"})}),"\n",r(e.ul,{children:["\n",r(e.li,{children:[n(e.code,{children:"a"})," ",n(e.em,{children:"(any)"})," - The first object to compare."]}),"\n",r(e.li,{children:[n(e.code,{children:"b"})," ",n(e.em,{children:"(any)"})," - The second object to compare."]}),"\n"]}),"\n",n(e.p,{children:n(e.strong,{children:"Returns:"})}),"\n",r(e.p,{children:[n(e.code,{children:"true"})," if ",n(e.code,{children:"a"})," and ",n(e.code,{children:"b"})," are equal, ",n(e.code,{children:"false"})," otherwise."]}),"\n",n(e.p,{children:n(e.strong,{children:"Example:"})}),"\n",n(e.pre,{children:n(e.code,{className:"language-js",children:"const a = { foo: 'bar' };\nconst b = { foo: 'bar' };\n\nisConfigEqual(a, b); // true\n\n// Without the JSON.stringify, a and b are considered different objects due to\n// referential inequality, and would normally return false.\n// However, when converted to JSON strings, a and b become equal, so isConfigEqual returns true.\n"})}),"\n",n(e.p,{children:" "}),"\n",n(e.h2,{children:"setConfigKeyValue(configKeyArray, setKeyValue)"}),"\n",r(e.p,{children:["A function that takes two arguments, ",n(e.code,{children:"configKeyArray"})," and ",n(e.code,{children:"setKeyValue"}),". Returns an object with the provided ",n(e.code,{children:"configKeyArray"})," keys, and the final key set to the provided ",n(e.code,{children:"setKeyValue"})," value."]}),"\n",n(e.p,{children:n(e.strong,{children:"Parameters:"})}),"\n",r(e.ul,{children:["\n",r(e.li,{children:[n(e.code,{children:"configKeyArray"})," ",n(e.em,{children:"(array or string)"})," - An array of keys to traverse through the config object or a string for direct child lookup."]}),"\n",r(e.li,{children:[n(e.code,{children:"setKeyValue"})," ",n(e.em,{children:"(any)"})," - The value to set the final key to in the returned object."]}),"\n"]}),"\n",n(e.p,{children:n(e.strong,{children:"Returns:"})}),"\n",n(e.p,{children:"An object with keys/subkeys, based on the provided array, and the final key set to the provided value."}),"\n",n(e.p,{children:n(e.strong,{children:"Example:"})}),"\n",n(e.pre,{children:n(e.code,{className:"language-js",children:"const a = ['foo', 'bar', 'baz'];\nconst b = 'qux';\n\nsetConfigKeyValue(a, b); // { foo: { bar: { baz: 'qux' } } }\n\n// The above response can then be merged using lodash to either create, or update the config object in the store.\n"})}),"\n",n(e.p,{children:" "}),"\n",n(e.h2,{children:"getConfigKeyValue(configKeyArray, objectToParse)"}),"\n",r(e.p,{children:["A function that takes two arguments, ",n(e.code,{children:"configKeyArray"})," and ",n(e.code,{children:"objectToParse"}),", and returns the value of the final key in the provided array by traversing through the provided object."]}),"\n",r(e.p,{children:["If the final key is not found, the function returns ",n(e.code,{children:"undefined"}),"."]}),"\n",n(e.p,{children:n(e.strong,{children:"Parameters:"})}),"\n",r(e.ul,{children:["\n",r(e.li,{children:[n(e.code,{children:"configKeyArray"})," ",n(e.em,{children:"(array or string)"})," - An array of keys to traverse through the config object or a string for direct child lookup."]}),"\n",r(e.li,{children:[n(e.code,{children:"objectToParse"})," ",n(e.em,{children:"(object)"})," - The object to parse and get the value from."]}),"\n"]}),"\n",n(e.p,{children:n(e.strong,{children:"Returns:"})}),"\n",r(e.p,{children:["The value of the final key in the provided array, by traversing through the provided object, or ",n(e.code,{children:"undefined"})," if the key is not found."]}),"\n",n(e.p,{children:n(e.strong,{children:"Example:"})}),"\n",n(e.pre,{children:n(e.code,{className:"language-js",children:"const a = ['foo', 'bar', 'baz'];\nconst b = { foo: { bar: { baz: 'qux' } } };\n\ngetConfigKeyValue(a, b); // 'qux'\n\n// Returns the value of the final key in the provided array, by traversing through the provided object.\n"})})]})}}const s=()=>{throw new Error("Docs-only story")};s.parameters={docsOnly:true};const o={title:"Helpers/configHelpers",tags:["stories-mdx"],includeStories:["__page"]};o.parameters=o.parameters||{};o.parameters.docs={...o.parameters.docs||{},page:h};const C=["__page"];export{C as __namedExportsOrder,s as __page,o as default};
//# sourceMappingURL=configHelpers.stories-b65610ea.js.map
