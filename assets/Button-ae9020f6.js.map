{"version":3,"file":"Button-ae9020f6.js","sources":["../../packages/core/components/element/Button.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\n// Third Party\nimport PropTypes from 'prop-types'\n\n// Components\nimport LoadSpin from '../ui/LoadSpin'\n\n// Styles\nimport '../../styles/v2/components/element/button.scss'\n\nconst Button = (\n  {\n    style,\n    role,\n    hoverStyle = {},\n    fluid = false,\n    disabled = false,\n    loadingText = 'Loading...',\n    flexCenter = false,\n    active = false,\n    onClick,\n    children, ...attributes\n  }\n) => {\n\n  const buttonRef = useRef(null)\n\n  const [ buttonState, setButtonState ] = useState('out')\n  const [ customStyles, setCustomStyles ] = useState({ ...style })\n  const [ childrenWidth, setChildrenWidth ] = useState(0)\n  const [ loadtextWidth, setLoadtextWidth ] = useState(0)\n\n  const attributesObj = {\n    ...attributes,\n    style: customStyles,\n    className:\n      'cove-button' +\n      (flexCenter || 'loader' === role ? ' cove-button--flex-center' : '') +\n      (fluid ? ' cove-button--fluid' : '') +\n      (disabled ? ' cove-button--loading' : '') +\n      (attributes.className ? ' ' + attributes.className : ''),\n    onMouseOver: () => setButtonState('in'),\n    onMouseOut: () => setButtonState('out'),\n    onFocus: () => setButtonState('in'),\n    onBlur: () => setButtonState('out')\n  }\n\n  useEffect(() => {\n    if ('loader' === role && buttonRef.current) {\n      //Create ghost object and text nodes for children\n      const ghostSpan = document.createElement('span')\n      const ghostContent = document.createTextNode(children)\n      ghostSpan.style.opacity = '0'\n      ghostSpan.style.visibility = 'hidden'\n\n      //Create ghost object and text nodes for loading value\n      const ghostLoaderSpan = document.createElement('span')\n      const ghostLoaderContent = document.createTextNode(loadingText)\n      ghostLoaderSpan.style.opacity = '0'\n      ghostLoaderSpan.style.visibility = 'hidden'\n\n      //Append data to ghost objects\n      ghostSpan.appendChild(ghostContent)\n      ghostLoaderSpan.appendChild(ghostLoaderContent)\n\n      //Append objects to document\n      buttonRef.current.parentNode.insertBefore(ghostSpan, buttonRef.current)\n      buttonRef.current.parentNode.insertBefore(ghostLoaderSpan, buttonRef.current)\n\n      //Register ghost width values in state\n      setChildrenWidth(ghostSpan.offsetWidth) //Toss in a -2px to account for subpixel offset\n      setLoadtextWidth(ghostLoaderSpan.offsetWidth) //Toss in a 2px to account for subpixel offset\n\n      //Remove ghost objects from document\n      buttonRef.current.parentNode.removeChild(ghostSpan)\n      buttonRef.current.parentNode.removeChild(ghostLoaderSpan)\n    }\n    return () => {\n    }\n  }, [ role, buttonRef.current ])\n\n  useEffect(() => {\n    //Adjust button styles depending on cursor, focus, and active, states\n    if (buttonState === 'in') {\n      return setCustomStyles(stateStyles => ({ ...stateStyles, ...hoverStyle }))\n    } else if (buttonState === 'out') {\n      if (!active) { //If button state is out, check if its 'active'; we want to keep hover styles applied to 'active' buttons\n        return setCustomStyles({ ...style }) //Button is not 'active', so reset display styles back to default\n      }\n    }\n    return () => {\n    }\n  }, [ buttonState, active ])\n\n  return (\n    <button {...attributesObj}\n            onClick={(e) => {\n              e.preventDefault()\n              return disabled || onClick !== undefined && onClick(e) || true\n            }}\n            disabled={disabled || attributesObj.disabled}\n            ref={buttonRef}>\n      {children &&\n        <>\n          {'loader' === role &&\n            <>\n              <span className=\"cove-button__text\" style={disabled ? { width: loadtextWidth + 'px' } : { width: childrenWidth + 'px' }}>\n                <div className=\"cove-button__text--loading\" style={disabled ? { opacity: 1 } : null}>{loadingText}</div>\n                <div className=\"cove-button__text--children\" style={disabled ? { opacity: 0 } : null}>{children}</div>\n              </span>\n              <div className=\"cove-button__load-spin\" style={disabled ? { width: '28px', opacity: 1 } : null}>\n                <LoadSpin className=\"ml-1\" size={20}/>\n              </div>\n            </>\n          }\n          {'loader' !== role && children}\n        </>\n      }\n    </button>\n  )\n}\n\nButton.propTypes = {\n  /** Specify special role type for button */\n  role: PropTypes.oneOf([ undefined, 'loader' ]),\n  /** Provide object with styles that overwrite base styles when hovered */\n  hoverStyle: PropTypes.object,\n  /** Enables button to stretch to the full width of the content */\n  fluid: PropTypes.bool,\n  /** Prevents interaction with the button while supplied condition is `true`\n   *\n   * When **role** is set to `loader`, a loading spinner is also displayed */\n  disabled: PropTypes.bool,\n  /** Set text to appear during loading animation */\n  loadingText: PropTypes.string,\n  /** Displays button as flex and centers all direct children nodes. Useful for aligning icons and text */\n  flexCenter: PropTypes.bool,\n  /** When value condition is true, retains any custom, inline `style={}` defined */\n  active: PropTypes.bool\n}\n\nexport default Button\n"],"names":["Button","style","role","hoverStyle","fluid","disabled","loadingText","flexCenter","active","onClick","children","attributes","buttonRef","useRef","buttonState","setButtonState","useState","customStyles","setCustomStyles","childrenWidth","setChildrenWidth","loadtextWidth","setLoadtextWidth","attributesObj","useEffect","ghostSpan","ghostContent","ghostLoaderSpan","ghostLoaderContent","stateStyles","jsx","jsxs","Fragment","LoadSpin","PropTypes"],"mappings":"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"}