{"version":3,"file":"InputCheckbox-a5b48cdb.js","sources":["../../packages/core/components/input/InputCheckbox.jsx"],"sourcesContent":["import React, { useState, useEffect, memo, useRef } from 'react'\nimport PropTypes from 'prop-types'\n\n// Hooks\nimport { useVisConfig } from '../../hooks/store/useVisConfig'\n\n// Helpers\nimport { getConfigKeyValue } from '../../helpers/configHelpers'\n\n// Components\nimport Icon from '../ui/Icon'\nimport Label from '../element/Label'\n\n// Styles\nimport '../../styles/v2/components/input/index.scss'\n\nconst InputCheckbox = memo((\n  {\n    label,\n    labelPosition = 'right',\n    tooltip,\n    size = 'small',\n    activeColor = null,\n    activeCheckColor = null,\n    stretch,\n    required,\n\n    configField,\n    value: inlineValue,\n    className, onClick, ...attributes\n  }\n) => {\n  const { config, updateVisConfigField } = useVisConfig()\n\n  const [ value, setValue ] = useState(false)\n\n  const inputRef = useRef(null)\n\n  // Get initial value\n  const configFieldValue = configField && getConfigKeyValue(configField, config)\n\n  // Check initial value\n  // Valid value of 'false' could be returned, so checking undefined\n  const valueExistsOnConfig = Boolean(configFieldValue && typeof configFieldValue !== undefined)\n\n  // Set initial value\n  useEffect(() => {\n    if (valueExistsOnConfig) {\n      configFieldValue !== value && setValue(configFieldValue)\n    } else {\n      setValue(inlineValue)\n    }\n  }, [ valueExistsOnConfig ])\n\n  useEffect(() => {\n    if (configField && value !== configFieldValue)\n      updateVisConfigField(configField, value)\n  }, [ configField, value, updateVisConfigField ])\n\n  const onClickHandler = () => inputRef.current.click()\n\n  const onChangeHandler = (e) => {\n    setValue(value => !value)\n    onClick && onClick(e)\n  }\n\n  const generateWrapperClasses = () => {\n    const classList = []\n\n    // Root class\n    const root = 'cove-input__checkbox-group'\n    classList.push(root)\n\n    // Stretch class\n    if (stretch) classList.push('cove-input__checkbox-group--stretch')\n\n    // Props classes\n    if (className) classList.push(className)\n\n    return classList.join(' ')\n  }\n\n  const generateInputClasses = () => {\n    const classList = []\n\n    // Root class\n    const root = 'cove-input__checkbox'\n    const suffixArr = {\n      small: '',\n      medium: '--medium',\n      large: '--large',\n      xlarge: '--xlarge'\n    }\n    classList.push(root + suffixArr[size])\n\n    // Active class\n    if (value) classList.push('cove-input__checkbox--active')\n\n    // Required class\n    // if (required && (value === undefined)) classList.push('cove-input--error')\n\n    return classList.join(' ')\n  }\n\n  const TooltipLabel = () => {\n    const labelProps = (tooltip && tooltip !== \"\") && { 'data-has-tooltip': true }\n\n    return (\n      <div className=\"cove-input__checkbox-group__label\" {...labelProps}>\n        <Label tooltip={tooltip} onClick={onClickHandler}>{label}</Label>\n      </div>\n    )\n  }\n\n  return (\n    <div className={generateWrapperClasses()} flow={labelPosition}>\n      {label && labelPosition === 'left' &&\n        <TooltipLabel/>\n      }\n      <div className={generateInputClasses()}\n        tabIndex={0}\n        onClick={onClickHandler}\n        onKeyUp={(e) => {\n          if (e.code === 'Enter' || e.code === 'NumpadEnter' || e.code === 'Space') onClickHandler()\n        }}\n      >\n        <div className={`cove-input__checkbox-box${activeColor ? ' cove-input__checkbox-box--custom-color' : ''}`}\n             style={value && activeColor ? { backgroundColor: activeColor } : null}>\n          <Icon display=\"check\" className=\"cove-input__checkbox-check\" color={activeCheckColor || '#025eaa'}/>\n        </div>\n        <input className=\"cove-input--hidden\" type=\"checkbox\" defaultChecked={value} onChange={(e) => onChangeHandler(e)} ref={inputRef} tabIndex={-1} readOnly/>\n      </div>\n      {label && labelPosition === 'right' &&\n        <TooltipLabel/>\n      }\n    </div>\n  )\n})\n\nInputCheckbox.propTypes = {\n  label: PropTypes.string,\n  labelPosition: PropTypes.oneOf([ 'left', 'right' ]),\n  tooltip: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object\n  ]),\n  size: PropTypes.oneOf([ 'small', 'medium', 'large' ]),\n  activeColor: PropTypes.string,\n  activeCheckColor: PropTypes.string,\n  value: PropTypes.bool\n}\n\nexport default InputCheckbox\n"],"names":["InputCheckbox","memo","label","labelPosition","tooltip","size","activeColor","activeCheckColor","stretch","required","configField","inlineValue","className","onClick","attributes","config","updateVisConfigField","useVisConfig","value","setValue","useState","inputRef","useRef","configFieldValue","getConfigKeyValue","valueExistsOnConfig","useEffect","onClickHandler","onChangeHandler","generateWrapperClasses","classList","root","generateInputClasses","suffixArr","TooltipLabel","jsx","Label","jsxs","Icon","PropTypes"],"mappings":"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"}