{"version":3,"file":"ConfigProxy-65d24e12.js","sources":["../../packages/core/helpers/dataTransform.js","../../packages/core/helpers/update/ver/4.23.js","../../packages/core/helpers/update/coveUpdateWorker.js","../../packages/core/components/hoc/ConfigProxy.jsx"],"sourcesContent":["export default class dataTransform {\n  constructor() {\n    this.constants = {\n      errorMessageEmtpyData: 'Your data file is empty.',\n      errorMessageFormat: 'Your datatype is not supported.',\n      descriptionHeader: 1,\n      descriptionRoot: 2,\n      descriptionSeriesFilter: 3\n    }\n  }\n\n  //Performs standardizations that can be completed automatically without use input\n  autoStandardize(data) {\n    const errorsFound = []\n\n    // Empty data\n    if (0 === data.length) {\n      errorsFound.push(this.constants.errorMessageEmptyData)\n    }\n\n    // Does it have the correct data structure?\n    if (!data.filter || data.filter(row => typeof row !== 'object').length > 0) {\n      errorsFound.push(this.constants.errorMessageFormat)\n    }\n\n    if (errorsFound.length > 0) {\n      console.error(errorsFound)\n      return undefined\n    }\n\n    //Convert array of arrays, to array of objects\n    if (data.filter(row => row.constructor !== Object).length > 0) {\n      let standardizedData = []\n      for (let row = 1; row < data.length; row++) {\n        let standardizedRow = {}\n        data[row].forEach((datum, col) => {\n          standardizedRow[data[0][col]] = datum\n        })\n        standardizedData.push(standardizedRow)\n      }\n      data = standardizedData\n    }\n\n    return data\n  }\n\n  //Performs standardizations based on developer provided description of the data\n  developerStandardize(data, description) {\n    //Validate the description object\n    if (!description) {\n      return undefined\n    }\n\n    if (description.horizontal === undefined || description.series === undefined) {\n      return undefined\n    }\n\n    if (description.series === true && description.horizontal === false && description.singleRow === undefined) {\n      return undefined\n    }\n\n    if (description.horizontal === true) {\n      if (description.series === true) {\n        if (!description.seriesKey) {\n          return undefined\n        }\n\n        let standardizedMapped = {}\n        let standardized = []\n        data.forEach(row => {\n          let nonNumericKeys = []\n          Object.keys(row).forEach(key => {\n            if (key !== description.seriesKey && isNaN(parseFloat(row[key]))) {\n              nonNumericKeys.push(key)\n            }\n          })\n\n          Object.keys(row).forEach(key => {\n            if (key !== description.seriesKey && nonNumericKeys.indexOf(key) === -1) {\n              let uniqueKey = key + '|' + nonNumericKeys.map(nonNumericKey => nonNumericKey + '=' + row[nonNumericKey])\n              if (!standardizedMapped[uniqueKey]) {\n                standardizedMapped[uniqueKey] = { [row[description.seriesKey]]: row[key], key }\n                nonNumericKeys.forEach(nonNumericKey => {\n                  standardizedMapped[uniqueKey][nonNumericKey] = row[nonNumericKey]\n                })\n              }\n              standardizedMapped[uniqueKey][row[description.seriesKey]] = row[key]\n            }\n          })\n        })\n\n        Object.keys(standardizedMapped).forEach(key => {\n          standardized.push(standardizedMapped[key])\n        })\n\n        return standardized\n      } else {\n        let standardized = []\n\n        data.forEach(row => {\n          let nonNumericKeys = []\n          Object.keys(row).forEach(key => {\n            if (isNaN(parseFloat(row[key]))) {\n              nonNumericKeys.push(key)\n            }\n          })\n\n          Object.keys(row).forEach(key => {\n            if (nonNumericKeys.indexOf(key) === -1) {\n              let newRow = { key, value: row[key] }\n\n              nonNumericKeys.forEach(nonNumericKey => {\n                newRow[nonNumericKey] = row[nonNumericKey]\n              })\n\n              standardized.push(newRow)\n            }\n          })\n        })\n\n        return standardized\n      }\n    } else if (description.series === true && description.singleRow === false) {\n      if (description.seriesKey !== undefined && description.xKey !== undefined && description.valueKey !== undefined) {\n        let standardizedMapped = {}\n        let standardized = []\n\n        data.forEach(row => {\n          let extraKeys = []\n          let uniqueKey = row[description.xKey]\n          Object.keys(row).forEach(key => {\n            if (key !== description.xKey && key !== description.seriesKey && key !== description.valueKey) {\n              uniqueKey += '|' + key + '=' + row[key]\n              extraKeys.push(key)\n            }\n          })\n\n          if (standardizedMapped[uniqueKey]) {\n            standardizedMapped[uniqueKey][row[description.seriesKey]] = row[description.valueKey]\n          } else {\n            standardizedMapped[uniqueKey] = { [description.xKey]: row[description.xKey], [row[description.seriesKey]]: row[description.valueKey] }\n            extraKeys.forEach(key => {\n              standardizedMapped[uniqueKey][key] = row[key]\n            })\n          }\n        })\n\n        Object.keys(standardizedMapped).forEach(key => {\n          standardized.push(standardizedMapped[key])\n        })\n\n        return standardized\n      } else {\n        return undefined\n      }\n    }\n\n    return data\n  }\n}\n","const update423 = (config) => {\n  const ver = 4.23\n\n  let newConfig = { ...config }\n\n  if (!config.validated || config.validated < ver) {\n\n    // Convert theme definition in config to color only\n    if (newConfig.theme.includes(\"theme-\")) {\n      newConfig.theme = newConfig.theme.split('-')[1]\n    }\n\n    // Remove old visual config entries since these were consolidated into a new format\n    delete newConfig.hideBackgroundColor\n    delete newConfig.roundedBorders\n    delete newConfig.borderColorTheme\n\n    // Config alterations complete\n    // Add validation mark to config...\n    newConfig.validated = ver\n  }\n\n  return newConfig\n}\n\nexport default update423\n","// If config key names or position in the config have been changed with a version change,\n// process those config entries and format old values into new\nimport update423 from './ver/4.23'\n\n\n// 4.23.1 ------------------------------------------------------\nconst coveUpdateWorker = (config) => {\n  let genConfig = config\n\n  // v4.23\n  genConfig = update423(genConfig)\n\n  return genConfig\n}\n\nexport default coveUpdateWorker\n","import { useState, useEffect } from 'react'\n\n// Third Party\nimport PropTypes from 'prop-types'\n\n// Store\nimport { useGlobalStore } from '../../stores/globalStore'\nimport { useConfigStore } from '../../stores/configStore'\n\n// Helpers\nimport dataTransform from '../../helpers/dataTransform'\nimport coveUpdateWorker from '../../helpers/update/coveUpdateWorker'\n\nconst ConfigProxy = ({ configObj, configUrl, defaults = null, runtime = null, children }) => {\n  const { viewMode } = useGlobalStore((state) => state)\n  const { setConfigDefaults, updateConfig } = useConfigStore()\n\n  const [ cycle, setCycle ] = useState(false)\n  const [ loadingConfig, setLoadingConfig ] = useState(true)\n\n  const transform = new dataTransform()\n\n  const reloadConfig = () => {\n    setLoadingConfig(true)\n    setCycle(false)\n  }\n\n  useEffect(() => {\n    const fetchConfigUrl = async (url) => {\n      console.log(url)\n      let urlObj = null\n      try {\n        const res = await fetch(url)\n        const text = await res.text()\n        urlObj = JSON.parse(text)\n      } catch (err) {\n        console.error('Supplied config URL is not in JSON format - invalid address?')\n      }\n      return urlObj\n    }\n\n    const fetchConfig = async () => {\n      // If defaults exist, store the default config context object in ConfigContext\n      if (defaults) setConfigDefaults({ ...defaults })\n\n      // Check if \"data\" is included through a URL, or directly, and set value\n      let response = configObj || await fetchConfigUrl(configUrl) || {}\n\n      let responseData = response.formattedData || response.data || []\n\n      // If a data URL is provided, fetch data then return. Overrides any previous data set.\n      if (response.dataUrl) {\n        const dataString = await fetch(response.dataUrl)\n        responseData = await dataString.json()\n\n        // If data from the URL has a \"data description\", use the standardization functions on that returned data\n        if (response.dataDescription) {\n          responseData = transform.autoStandardize(responseData)\n          responseData = transform.developerStandardize(responseData, response.dataDescription)\n        }\n      }\n\n      // If defaults exist, create the new config object with shallow merge of defaults and data\n      let newConfig = defaults ? { ...defaults, ...response } : { ...response }\n\n      // If defaults exist, create new keys on newConfig from defaults that don't exist\n      if (defaults) {\n        Object.keys(defaults).forEach(key => {\n          if (newConfig[key] && 'object' === typeof newConfig[key] && !Array.isArray(newConfig[key])) {\n            newConfig[key] = { ...defaults[key], ...newConfig[key] }\n          }\n        })\n      }\n\n      // Validates config file and updates any previous entries into new format\n      newConfig = coveUpdateWorker(newConfig)\n\n      newConfig.data = responseData // Attach data to newConfig\n\n      // Make config entry for table visibility - TODO: COVE Refactor - May no longer need with global context inclusion of view mode?\n      if (newConfig.table && undefined === newConfig.table.show) newConfig.table.show = 'dashboard' === viewMode\n\n      return newConfig\n    }\n\n    if (!cycle) {\n      fetchConfig()\n        .then((newConfig) => {\n          updateConfig(newConfig, runtime) // Set final config data in ConfigContext, TODO: COVE Refactor - is this being parsed properly? Is runtime being attached?\n          setLoadingConfig(false) // Tell subcomponents that the config is ready\n        })\n        .catch(console.error)\n        .finally(() => {\n          setCycle(true) // Switch to end the useLoadConfig cycle\n        })\n    }\n  }, [ cycle, configObj, configUrl ])\n\n  return (loadingConfig ? <></> : children)\n}\n\nConfigProxy.propTypes = {\n  /** A *__json object__* containing values used for configuration of the dashboard or component */\n  configObj: PropTypes.object,\n  /** A *__url referral to a json object__* containing values used for configuration of the dashboard or component  */\n  configUrl: PropTypes.string,\n  /** A json object containing any default, baseline values for a visualization. */\n  defaults: PropTypes.object,\n  /** A visualization-specific function that is run against the resolved *configObj* or *configURL* object; returns a modified object based off those processed values */\n  runtime: PropTypes.func,\n}\n\nexport default ConfigProxy\n"],"names":["dataTransform","data","errorsFound","row","standardizedData","standardizedRow","datum","col","description","standardizedMapped","standardized","nonNumericKeys","key","uniqueKey","nonNumericKey","newRow","extraKeys","update423","config","newConfig","coveUpdateWorker","genConfig","ConfigProxy","configObj","configUrl","defaults","runtime","children","viewMode","useGlobalStore","state","setConfigDefaults","updateConfig","useConfigStore","cycle","setCycle","useState","loadingConfig","setLoadingConfig","transform","useEffect","fetchConfigUrl","url","urlObj","text","response","responseData","PropTypes"],"mappings":"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"}