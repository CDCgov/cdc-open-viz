import{M as d}from"./index-41cddf45.js";import{j as n,a as r,F as s}from"./jsx-runtime-f14b59b8.js";import{u as c}from"./index-093f7bde.js";import"./iframe-1badc4b0.js";import"../sb-preview/runtime.mjs";import"./index-18f6e4ac.js";import"./_commonjsHelpers-53f7dec1.js";import"./index-6820418a.js";import"./index-3e075a63.js";import"./index-8052939a.js";import"./index-87c76d85.js";import"./index-f4cbaf5b.js";import"./index-edb31f89.js";function l(t={}){const{wrapper:i}=Object.assign({},c(),t.components);return i?n(i,{...t,children:n(a,{})}):a();function a(){const e=Object.assign({h1:"h1",p:"p",h2:"h2",ul:"ul",li:"li",code:"code",strong:"strong",pre:"pre"},c(),t.components);return r(s,{children:[n(d,{title:"Helpers/coveUpdateWorker"}),"\n",n(e.h1,{children:"coveUpdateWorker"}),"\n",n(e.p,{children:"The coveUpdateWorker is a config worker used to update COVE config data automatically. It allows for key values to be updated with new values, transferred to new key entries, and/or removed from the config entirely."}),"\n",n(e.h2,{children:"Usage"}),"\n",r(e.ul,{children:["\n",r(e.li,{children:["\n",r(e.p,{children:["The update workers can be found in the ",n(e.code,{children:"./packages/core/helpers/update"})," directory. The ",n(e.code,{children:"coveUpdateWorker"})," is the main worker, with the ",n(e.code,{children:"./packages/core/helpers/update/ver/..."})," directory housing semantically versioned update workers (ie, ",n(e.code,{children:"4.23.js"}),", ",n(e.code,{children:"4.3.js"}),", etc)."]}),"\n"]}),"\n",r(e.li,{children:["\n",r(e.p,{children:["Versioned workers can be asyncronously chain-called in the ",n(e.code,{children:"coveUpdateWorker"})," in order to step through multiple version updates for a config object."]}),"\n"]}),"\n",r(e.li,{children:["\n",r(e.p,{children:["Once a worker processes a config object, it tags the processed config with a supplied version number as a ",n(e.code,{children:'validated="4.x.x'})," entry."]}),"\n"]}),"\n",r(e.li,{children:["\n",r(e.p,{children:["If a config object is either unversioned (doesn't have a ",n(e.code,{children:"config.validated"})," entry), or the current ",n(e.code,{children:"validated"})," version is less than the version of the worker, ",n(e.code,{children:"coveUpdateWorker"})," automatically calls the next versioned worker."]}),"\n",n(e.p,{children:n(e.strong,{children:"Example:"})}),"\n",n(e.pre,{children:n(e.code,{className:"language-js",children:"// For example, an update_4_23 worker might change the theme key\n// of a config from 'theme-blue' to 'blue', by removing the 'theme-' prefix:\n\n// Config object provided\nconst genConfig = {\n  title: 'My Config',\n  theme: 'theme-blue',\n  description: 'This is my config',\n  //validated: undefined, <-- config does not have a validated value, so an entry will be set by the 4.23 worker\n}\n\nupdate_4_23(genConfig) // <-- 4.23 worker processes the config\n\n// New Config object result\ngenConfig = {\n  title: 'My Config',\n  theme: 'blue', //<-- theme key value has been updated\n  description: 'This is my config',\n  validated: '4.23', //<-- config has been marked validated after being processed by the 4.23 worker\n}\n"})}),"\n"]}),"\n"]})]})}}const h=()=>{throw new Error("Docs-only story")};h.parameters={docsOnly:true};const o={title:"Helpers/coveUpdateWorker",tags:["stories-mdx"],includeStories:["__page"]};o.parameters=o.parameters||{};o.parameters.docs={...o.parameters.docs||{},page:l};const C=["__page"];export{C as __namedExportsOrder,h as __page,o as default};
//# sourceMappingURL=coveUpdateWorker.stories-c6ea081c.js.map
