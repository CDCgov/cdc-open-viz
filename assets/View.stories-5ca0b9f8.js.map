{"version":3,"file":"View.stories-5ca0b9f8.js","sources":["../../packages/core/data/const.js","../../packages/core/components/editor/Editor.jsx","../../packages/core/components/hoc/View.jsx","../../packages/core/components/hoc/_stories/View.stories.mdx"],"sourcesContent":["export const COVE_BREAKPOINTS = [\n  '360',  // xxs (mobile) 0 - 360\n  '480',  // xs\n  '768',  // sm\n  '960',  // md\n  '1170', // lg\n  '1280'  // xl\n]\n","import React, { useState, useEffect, useCallback, useRef } from 'react'\n\n// Store\nimport useStore from '../../store/store'\n\n// Hooks\nimport { useVisConfig } from '../../hooks/store/useVisConfig'\n\n// Data\nimport { COVE_BREAKPOINTS as breakpoints } from '../../data/const'\n\n// Helpers\nimport CoveHelper from '../../helpers/cove'\n\n// Components - Local\nimport Button from '../element/Button'\nimport Icon from '../ui/Icon'\nimport SplashError from '../ui/SplashError'\n\n// Styles\nimport '../../styles/v2/components/editor.scss'\nimport '../../styles/v2/components/element/editor-utils.scss'\n\nconst Editor = ({ editorPanels, children }) => {\n  // Store Selectors\n  const { config, updateVisConfig } = useVisConfig()\n  const os = useStore(state => state.os)\n\n  const [ displayPanel, setDisplayPanel ] = useState(true)\n  const [ displayGrid, setDisplayGrid ] = useState(false)\n  const [ viewportPreview, setViewportPreview ] = useState(null)\n  const [ rotateAnimation, setRotateAnimation ] = useState(false)\n  const [ showConfirm, setShowConfirm ] = useState(false)\n\n  const [ previewDimensions, setPreviewDimensions ] = useState({})\n\n  const resetIcon = useRef(null)\n  const editorPanelRef = useRef(null)\n  const componentContainerRef = useRef(null)\n\n  const convertStateToConfig = () => {\n    let strippedState = JSON.parse(JSON.stringify(config))\n    delete strippedState.newViz\n    return strippedState\n  }\n\n  // If a subcomponent is being consumbed by Wizard or Dashboard, the update function\n  // is received by the ConfigProxy and registered in the store.\n  // The function is then used below when the config is updated.\n  /*useEffect(() => {\n    if (updateParentConfig) updateParentConfig(convertStateToConfig())\n  }, [ updateParentConfig ])*/\n\n  // Set and clean up the event listener for the hotkeys\n  useEffect(() => {\n    document.addEventListener('keydown', onKeypress)\n    return () => document.removeEventListener('keydown', onKeypress)\n  }, [])\n\n  // Toggle the grid display with the viewport preview\n  useEffect(() => {\n    return viewportPreview ? setDisplayGrid(true) : setDisplayGrid(false)\n  }, [ viewportPreview ])\n\n  // If missing any required sections, enable the confirmation window,\n  // and keep active until receiving confirmation.\n  useEffect(() => {\n    if (config.missingRequiredSections === true) setShowConfirm(true)\n    if (config.missingRequiredSections === false && showConfirm === true) setShowConfirm(false)\n  }, [ config.missingRequiredSections, showConfirm ])\n\n  // If there is no longer a confirmation, update the component's config.\n  useEffect(() => {\n    if (showConfirm === false) updateVisConfig(convertStateToConfig())\n  }, [ showConfirm ])\n\n  const viewportPreviewController = useCallback((breakpoint) => {\n    return setViewportPreview(prevState => prevState !== breakpoint ? breakpoint : null)\n  }, [ viewportPreview ])\n\n  const onKeypress = (key) => {\n    if (key.code === 'Escape') setDisplayPanel(display => !display)\n\n    const viewportCommandKey = os === 'MacOS' ? key.metaKey : key.altKey\n\n    if (viewportCommandKey) {\n      let keyIndex = key.key\n\n      // Validates that the hotkey pressed is a number, and that\n      // the number is within the range of the provided breakpoint list range.\n      if (!isNaN(keyIndex)) {\n        if (keyIndex <= breakpoints.length) {\n          key.preventDefault()\n          viewportPreviewController(breakpoints[keyIndex - 1])\n        }\n      }\n    }\n\n    if (!viewportCommandKey) {\n      if (editorPanelRef.current && !editorPanelRef.current.contains(document.activeElement)) {\n        if (key.code === 'KeyG') setDisplayGrid(display => !display)\n        if (key.code === 'KeyR') resetPreview()\n      }\n    }\n  }\n\n  // Observe and set editor component widths\n  useEffect(() => {\n    if (!componentContainerRef.current) return\n\n    let resizeObserver = new ResizeObserver(entries => {\n      for (let entry of entries) {\n        let { width, height } = entry.contentRect\n        setPreviewDimensions({ width, height })\n      }\n    })\n\n    resizeObserver.observe(componentContainerRef.current)\n\n    return () => {\n      if (!resizeObserver) return\n      resizeObserver.disconnect()\n      resizeObserver = null\n    }\n  }, [])\n\n  const onBackClick = () => setDisplayPanel(!displayPanel)\n\n  const Confirm = () => {\n    const confirmDone = () => setShowConfirm(false)\n\n    return (\n      <section className=\"cove-splash__waiting\">\n        <section className=\"cove-splash__waiting__container\">\n          <h3>Finish Configuring</h3>\n          <p>Set all required options to the left and confirm below to display the preview.</p>\n          <Button className=\"mt-2 mx-auto\" disabled={config.missingRequiredSections} onClick={() => confirmDone()}>I'm Done</Button>\n        </section>\n      </section>\n    )\n  }\n\n  //Reset Viewport Preview\n  const resetPreview = useCallback(() => {\n    if (!rotateAnimation && resetIcon.current) {\n      setViewportPreview(null)\n      setRotateAnimation(true)\n      setDisplayGrid(false)\n      resetIcon.current.style.transition = 'transform 800ms cubic-bezier(0.16, 1, 0.3, 1)'\n      resetIcon.current.style.transform = 'rotate(-360deg)'\n\n      const timeoutShow = setTimeout(() => {\n        setRotateAnimation(false)\n        resetIcon.current.style.transition = null\n        resetIcon.current.style.transform = 'rotate(0deg)'\n        resetIcon.current.style.transform = null\n      }, 400)\n\n      return () => clearTimeout(timeoutShow)\n    }\n  }, [ rotateAnimation ])\n\n  let view = <>{children}</>\n\n  if (editorPanels) {\n    view = (\n      <div className={`cove-editor${displayPanel ? ' panel-shown' : ''}`}>\n        <button className={`cove-editor__toggle` + (!displayPanel ? ` collapsed` : ``)}\n                title={displayPanel ? `Collapse Editor` : `Expand Editor`} onClick={onBackClick}/>\n        <section className=\"cove-editor__panel\" tabIndex={0} ref={editorPanelRef}>\n          <h2 className=\"cove-editor__panel-heading\" aria-level=\"2\" role=\"heading\">\n            Configure {config.type ? CoveHelper.String.convertKebabToTitle(config.type) : 'Component'}\n          </h2>\n          <div className=\"cove-editor__panel-container\">\n            <section className=\"cove-editor__panel-config\">\n              {editorPanels}\n            </section>\n          </div>\n        </section>\n        <div className=\"cove-editor__content\" data-grid={displayGrid || null}>\n          {showConfirm && <Confirm/>}\n          <div className=\"cove-editor__content-wrap--x\" style={viewportPreview ? { maxWidth: viewportPreview + 'px', minWidth: 'unset' } : null}>\n            <div className=\"cove-editor__content-wrap--y\">\n              <div className=\"cove-editor-utils__breakpoints--px\">\n                {displayGrid && displayPanel && <>\n                  {Math.round(previewDimensions.width)}<span className=\"mx-1\" style={{ fontSize: '0.675rem' }}>âœ•</span>{Math.round(previewDimensions.height)}\n                </>}\n              </div>\n              <div className=\"cove-editor__grid-caret--top\" ref={componentContainerRef}>\n                <div className=\"cove-editor__grid-caret--bottom\">\n                  {undefined === config?.newViz && config?.runtime?.editorErrorMessage && config?.runtime?.editorErrorMessage.length > 0 &&\n                    <SplashError title=\"Error With Configuration\" message={config.runtime.editorErrorMessage}/>\n                  }\n                  {children}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"cove-editor-utils__hotkeys\">\n            <div className=\"cove-editor-utils__hotkeys--left\">\n              <p className={displayPanel ? 'hotkey--active' : null}>Editor</p>\n              <p className={displayGrid ? 'hotkey--active' : null}>Grid</p>\n              <p className={rotateAnimation ? 'hotkey--active' : null}>Reset</p>\n              <p className={viewportPreview ? 'hotkey--active' : null}>View</p>\n            </div>\n            <div className=\"cove-editor-utils__hotkeys--right\">\n              <p className={displayPanel ? 'hotkey--active' : null}>esc</p>\n              <p className={displayGrid ? 'hotkey--active' : null}>G</p>\n              <p className={rotateAnimation ? 'hotkey--active' : null}>R</p>\n              <p className={viewportPreview ? 'hotkey--active' : null}>\n                {os === 'MacOS' ? <Icon style={{ marginRight: '0.25rem' }} display=\"command\" size={12}/> : 'Alt'} + {viewportPreview ? (breakpoints.indexOf(viewportPreview) + 1) : `[1 - ${breakpoints.length}]`}\n              </p>\n            </div>\n          </div>\n          <div className=\"cove-editor-utils__breakpoints\">\n            <ul className={`cove-editor-utils__breakpoints-list${viewportPreview ? ' has-active' : ''}`}>\n              <li className=\"cove-editor-utils__breakpoints-item\" onClick={() => {\n                setDisplayGrid(display => !display)\n              }}>\n                <div className=\"cove-editor-utils__breakpoints-grid\">\n                  <Icon display=\"squareGrid\"/>\n                </div>\n              </li>\n              {breakpoints.map((breakpoint, index) => (\n                <li className={`cove-editor-utils__breakpoints-item${viewportPreview === breakpoint ? ' active' : ''}`} onClick={() => viewportPreviewController(breakpoint)} key={index}>{breakpoint}px</li>\n              ))}\n              <li className=\"cove-editor-utils__breakpoints-item\" onClick={() => {\n                resetPreview()\n              }}>\n                <div className=\"cove-editor-utils__breakpoints-reset\" ref={resetIcon}>\n                  <Icon display=\"rotateLeft\"/>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return view\n}\n\nexport default Editor\n","import React, { useEffect, useCallback, useRef } from 'react'\n\n// Third Party\nimport PropTypes from 'prop-types'\n\n// Store\nimport useStore from '../../store/store'\n\n// Components - Core\nimport Editor from '../editor/Editor'\nimport Overlay from '../ui/Overlay'\n\n// Styles\nimport '../../styles/v2/main.scss'\n\nconst View = ({ editorPanels, isPreview, children }) => {\n  // Global Store Selectors\n  const { viewMode, setViewMode, setViewport } = useStore()\n\n  const winLocation = window.location.href\n\n  useEffect(() => {\n    const viewportObserver = new ResizeObserver((entries) => {\n      const { width } = entries[0].contentRect;\n      setViewport(width)\n    });\n    viewportObserver.observe(document.documentElement);\n    return () => viewportObserver.disconnect();\n  }, []);\n\n  useEffect(() => {\n    if (winLocation.includes('editor=true')) setViewMode('isEditor', true)\n    return () => {\n    }\n  }, [ winLocation, setViewMode ])\n\n  const { isEditor, isDashboard, isWizard } = viewMode\n\n  // Define the anchor ref to attach Overlay/Modals\n  const overlayAnchor = useRef()\n\n  const ReturnView = useCallback(() => {\n      // Render the display of the component editor, based on the generated viewMode value in globalStore\n      if (\n        (isEditor && (!isDashboard && !isWizard)) || // If editor mode is enabled, but not in Dashboard or Wizard views\n        (isEditor && isDashboard && !isPreview) || // If editor mode is enabled, and in Dashboard view, but not in preview mode\n        isWizard // If in the Wizard view\n      ) {\n        return (\n          <Editor editorPanels={editorPanels}>\n            {children}\n          </Editor>\n        )\n      }\n      return <>{children}</>\n    },\n    [ isEditor, isDashboard, isWizard, isPreview ]\n  )\n\n  if (isDashboard || isWizard) return (\n    <>\n      <ReturnView/>\n      <Overlay/>\n    </>\n  )\n  return (\n    <div className=\"cove\" ref={overlayAnchor}>\n      <ReturnView/>\n      <Overlay/>\n    </div>\n  )\n}\n\nView.propTypes = {\n  /** **[External]** Defined in the `globalStore` - Sets the Editor view mode for the component */\n  'viewMode.isEditor': PropTypes.bool,\n  /** **[External]** Defined in the `globalStore` - Sets the Dashboard view mode for the component */\n  'viewMode.isDashboard': PropTypes.bool,\n  /** **[External]** Defined in the `globalStore` - Sets the Dashboard's Preview view mode for the component */\n  'viewMode.isPreview': PropTypes.bool,\n  /** **[External]** Defined in the `globalStore` - Sets the Wizard view mode for the component */\n  'viewMode.isWizard': PropTypes.bool,\n  /** The React component export of the EditorPanels for the component */\n  EditorPanels: PropTypes.func\n}\n\nexport default View\n","import { Canvas, Meta, Story, ArgsTable } from '@storybook/blocks';\n\nimport View from '../View'\n\n<Meta\n  title=\"Components/HOC/View\"\n  component={View}\n/>\n\n# View Component\nA special component that renders a layout based on the current view for the user. The view is changed, depending on the consumption of the component, or the current URL of the user:\n- If a COVE component is loaded on its own, the view will be set to `component`. In this mode, the component displays as normal, and no interactive options are available. This is the default view.\n- If the URL contains `?editor=true`, the view will be set to `editor`. In this mode, the EditorPanels for an individual component will be accessible, and a special interactive screen is available for previewing the component with breakpoints.\n- When accessing a component through the Wizard, the view is set to `wizard`. In this mode, the EditorPanels and interactive breakpoint previews are available, regardless of the URL parameters.\n\n<Story name=\"Example\"/>\n\n<ArgsTable story=\"Example\"/>\n\nexport const Template = ({ ...args }) => <View {...args}/>\n"],"names":["COVE_BREAKPOINTS","Editor","editorPanels","children","config","updateVisConfig","useVisConfig","os","useStore","state","displayPanel","setDisplayPanel","useState","displayGrid","setDisplayGrid","viewportPreview","setViewportPreview","rotateAnimation","setRotateAnimation","showConfirm","setShowConfirm","previewDimensions","setPreviewDimensions","resetIcon","useRef","editorPanelRef","componentContainerRef","convertStateToConfig","strippedState","useEffect","onKeypress","viewportPreviewController","useCallback","breakpoint","prevState","key","display","viewportCommandKey","keyIndex","breakpoints","resetPreview","resizeObserver","entries","entry","width","height","onBackClick","Confirm","confirmDone","jsxs","jsx","Button","timeoutShow","view","CoveHelper","Fragment","_a","_b","SplashError","Icon","index","View","isPreview","viewMode","setViewMode","setViewport","winLocation","viewportObserver","isEditor","isDashboard","isWizard","overlayAnchor","ReturnView","Overlay","PropTypes","Template","args","_jsx","MDXContent","props","MDXLayout","_provideComponents","_createMdxContent","_components","_jsxs","_Fragment","Meta","Story","ArgsTable","example","componentMeta","__namedExportsOrder"],"mappings":"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"}