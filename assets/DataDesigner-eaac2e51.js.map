{"version":3,"file":"DataDesigner-eaac2e51.js","sources":["../../packages/core/templates/dataDesignerTables.jsx","../../packages/core/components/managers/DataDesigner.jsx"],"sourcesContent":["import React from 'react'\n\nexport const DATA_TABLE_VERTICAL = (\n  <>\n    <table>\n      <tbody>\n        <tr>\n          <th>Date</th>\n          <th>Value</th>\n          <th>...</th>\n        </tr>\n        <tr>\n          <td>01/01/2020</td>\n          <td>150</td>\n          <td>...</td>\n        </tr>\n        <tr>\n          <td>02/01/2020</td>\n          <td>150</td>\n          <td>...</td>\n        </tr>\n      </tbody>\n    </table>\n    <table>\n      <tbody>\n        <tr>\n          <th>State</th>\n          <th>Value</th>\n          <th>...</th>\n        </tr>\n        <tr>\n          <td>Georgia</td>\n          <td>150</td>\n          <td>...</td>\n        </tr>\n        <tr>\n          <td>Florida</td>\n          <td>150</td>\n          <td>...</td>\n        </tr>\n      </tbody>\n    </table>\n  </>\n)\n\nexport const DATA_TABLE_HORIZONTAL = (\n  <>\n    <table>\n      <tbody>\n        <tr>\n          <th>Date</th>\n          <td>01/01/2020</td>\n          <td>02/01/2020</td>\n          <td>...</td>\n        </tr>\n        <tr>\n          <th>Value</th>\n          <td>100</td>\n          <td>150</td>\n          <td>...</td>\n        </tr>\n      </tbody>\n    </table>\n    <table>\n      <tbody>\n        <tr>\n          <th>State</th>\n          <td>Georgia</td>\n          <td>Florida</td>\n          <td>...</td>\n        </tr>\n        <tr>\n          <th>Value</th>\n          <td>100</td>\n          <td>150</td>\n          <td>...</td>\n        </tr>\n      </tbody>\n    </table>\n  </>\n)\n\nexport const DATA_TABLE_SINGLE_ROW = (\n  <table>\n    <tbody>\n      <tr>\n        <th>Date</th>\n        <th>Virus 1</th>\n        <th>Virus 2</th>\n        <th>...</th>\n      </tr>\n      <tr>\n        <td>01/01/2020</td>\n        <td>100</td>\n        <td>150</td>\n        <td>...</td>\n      </tr>\n      <tr>\n        <td>02/01/2020</td>\n        <td>15</td>\n        <td>20</td>\n        <td>...</td>\n      </tr>\n    </tbody>\n  </table>\n)\n\nexport const DATA_TABLE_MULTI_ROW = (\n  <table>\n    <tbody>\n      <tr>\n        <th>Virus</th>\n        <th>Date</th>\n        <th>Value</th>\n      </tr>\n      <tr>\n        <td>Virus 1</td>\n        <td>01/01/2020</td>\n        <td>100</td>\n      </tr>\n      <tr>\n        <td>Virus 1</td>\n        <td>02/01/2020</td>\n        <td>150</td>\n      </tr>\n      <tr>\n        <td>...</td>\n        <td>...</td>\n        <td>...</td>\n      </tr>\n      <tr>\n        <td>Virus 2</td>\n        <td>01/01/2020</td>\n        <td>15</td>\n      </tr>\n      <tr>\n        <td>Virus 2</td>\n        <td>02/01/2020</td>\n        <td>20</td>\n      </tr>\n      <tr>\n        <td>...</td>\n        <td>...</td>\n        <td>...</td>\n      </tr>\n    </tbody>\n  </table>\n)\n","import React from 'react'\n\nimport Button from '../elements/Button'\nimport Card from '../elements/Card'\n\nimport { DATA_TABLE_VERTICAL, DATA_TABLE_HORIZONTAL, DATA_TABLE_SINGLE_ROW, DATA_TABLE_MULTI_ROW } from '../../templates/dataDesignerTables'\nimport '../../styles/v2/components/data-designer.scss'\n\nconst DataDesigner = props => {\n  const { configureData, updateDescriptionProp, visualizationKey, dataKey, config, setConfig } = props\n\n  return (\n    <div className='cove-data-designer__container'>\n      <div className='mb-2'>\n        <div className='cove-heading--3 fw-bold mb-1'>Describe Data</div>\n        <div className='cove-heading--3 fw-normal mb-1'>Data Orientation</div>\n        <div className='grid grid-gap-2 mb-4'>\n          <div className='column'>\n            <button\n              className={'cove-data-designer__button' + (configureData.dataDescription && configureData.dataDescription.horizontal === false ? ' active' : '')}\n              onClick={() => {\n                updateDescriptionProp(visualizationKey, dataKey, 'horizontal', false)\n              }}\n            >\n              <Card>\n                <strong className='cove-heading--3'>Vertical</strong>\n                <p className='mb-1'>\n                  Values for map geography or chart date/category axis are contained in a single <em>column</em>.\n                </p>\n                {DATA_TABLE_VERTICAL}\n              </Card>\n            </button>\n          </div>\n          <div className='column'>\n            <button\n              className={'cove-data-designer__button' + (configureData.dataDescription && configureData.dataDescription.horizontal === true ? ' active' : '')}\n              onClick={() => {\n                updateDescriptionProp(visualizationKey, dataKey, 'horizontal', true)\n              }}\n            >\n              <Card>\n                <strong className='cove-heading--3'>Horizontal</strong>\n                <p className='mb-1'>\n                  Values for map geography or chart date/category axis are contained in a single <em>row</em>\n                </p>\n                {DATA_TABLE_HORIZONTAL}\n              </Card>\n            </button>\n          </div>\n        </div>\n      </div>\n      {configureData.dataDescription && (\n        <>\n          <div className='mb-2'>\n            <div className='mb-1'>Are there multiple series represented in your data?</div>\n            <div>\n              <Button\n                style={{ backgroundColor: '#00345d' }}\n                hoverStyle={{ backgroundColor: '#015daa' }}\n                className='mr-1'\n                onClick={() => {\n                  updateDescriptionProp(visualizationKey, dataKey, 'series', true)\n                }}\n                active={configureData.dataDescription.series === true}\n              >\n                Yes\n              </Button>\n              <Button\n                style={{ backgroundColor: '#00345d' }}\n                hoverStyle={{ backgroundColor: '#015daa' }}\n                onClick={() => {\n                  updateDescriptionProp(visualizationKey, dataKey, 'series', false)\n                }}\n                active={configureData.dataDescription.series === false}\n              >\n                No\n              </Button>\n            </div>\n          </div>\n          {configureData.dataDescription.horizontal === true && configureData.dataDescription.series === true && (\n            <div className='mb-2'>\n              <div className='mb-1'>Which property in the dataset represents which series the row is describing?</div>\n              <select\n                onChange={e => {\n                  updateDescriptionProp(visualizationKey, dataKey, 'seriesKey', e.target.value)\n                }}\n                defaultValue={configureData.dataDescription.seriesKey}\n              >\n                <option value=''>Choose an option</option>\n                {Object.keys(configureData.data[0]).map((value, index) => (\n                  <option value={value} key={index}>\n                    {value}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          {configureData.dataDescription.horizontal === false && configureData.dataDescription.series === true && (\n            <>\n              <div className='mb-2'>\n                <div className='mb-1'>Are the series values in your data represented in a single row, or across multiple rows?</div>\n                <div className='grid grid-gap-2 mb-4'>\n                  <div className='column'>\n                    <button\n                      className={'cove-data-designer__button' + (configureData.dataDescription.singleRow === true ? ' active' : '')}\n                      onClick={() => {\n                        updateDescriptionProp(visualizationKey, dataKey, 'singleRow', true)\n                      }}\n                    >\n                      <Card>\n                        <strong className='cove-heading--3'>Single Row</strong>\n                        <p className='mb-1'>Each row contains the data for an individual series in itself.</p>\n                        {DATA_TABLE_SINGLE_ROW}\n                      </Card>\n                    </button>\n                  </div>\n                  <div className='column'>\n                    <button\n                      className={'cove-data-designer__button' + (configureData.dataDescription.singleRow === false ? ' active' : '')}\n                      onClick={() => {\n                        updateDescriptionProp(visualizationKey, dataKey, 'singleRow', false)\n                      }}\n                    >\n                      <Card>\n                        <strong className='cove-heading--3'>Multiple Rows</strong>\n                        <p className='mb-1'>Each series data is broken out into multiple rows.</p>\n                        {DATA_TABLE_MULTI_ROW}\n                      </Card>\n                    </button>\n                  </div>\n                </div>\n              </div>\n              {configureData.dataDescription.singleRow === false && (\n                <>\n                  <div className='mb-2'>\n                    <div className='mb-1'>Which property in the dataset represents which series the row is describing?</div>\n                    <select\n                      onChange={e => {\n                        updateDescriptionProp(visualizationKey, dataKey, 'seriesKey', e.target.value)\n                      }}\n                      defaultValue={configureData.dataDescription.seriesKey}\n                    >\n                      <option value=''>Choose an option</option>\n                      {Object.keys(configureData.data[0]).map((value, index) => (\n                        <option value={value} key={index}>\n                          {value}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                  <div className='mb-2'>\n                    <div className='mb-1'>Which property in the dataset represents the values for the category/date axis or map geography?</div>\n                    <select\n                      onChange={e => {\n                        updateDescriptionProp(visualizationKey, dataKey, 'xKey', e.target.value)\n                      }}\n                      defaultValue={configureData.dataDescription.xKey}\n                    >\n                      <option value=''>Choose an option</option>\n                      {Object.keys(configureData.data[0]).map((value, index) => (\n                        <option value={value} key={index}>\n                          {value}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                  <div className='mb-2'>\n                    <div className='mb-1'>Which properties in the dataset represent the numeric value? (all remaining properties will be treated as filters)</div>\n                    {configureData.dataDescription.valueKeys && configureData.dataDescription.valueKeys.length > 0 && (\n                      <ul className='value-list'>\n                        {configureData.dataDescription.valueKeys.map((valueKey, index) => (\n                          <li key={`value-keys-list-${index}`}>\n                            {valueKey}\n                            <button\n                              onClick={() => {\n                                let newValueKeys = configureData.dataDescription.valueKeys\n                                newValueKeys.splice(index, 1)\n                                updateDescriptionProp(visualizationKey, dataKey, 'valueKeys', newValueKeys)\n                              }}\n                            >\n                              X\n                            </button>\n                          </li>\n                        ))}\n                      </ul>\n                    )}\n                    <select\n                      onChange={e => {\n                        if (e.target.value && (!configureData.dataDescription.valueKeys || configureData.dataDescription.valueKeys.indexOf(e.target.value) === -1)) {\n                          updateDescriptionProp(visualizationKey, dataKey, 'valueKeys', [...(configureData.dataDescription.valueKeys || []), e.target.value])\n                        }\n                      }}\n                    >\n                      <option value=''>Choose an option</option>\n                      {Object.keys(configureData.data[0])\n                        .filter(value => !configureData.dataDescription.valueKeys || configureData.dataDescription.valueKeys.indexOf(value) === -1)\n                        .map((value, index) => (\n                          <option value={value} key={`value-keys-option-${index}`}>\n                            {value}\n                          </option>\n                        ))}\n                    </select>\n                  </div>\n                  <div className='mb-2'>\n                    <div className='mb-1'>(Optional) Which properties in the dataset should be ignored? (will not be used or treated as filters)</div>\n                    {configureData.dataDescription.ignoredKeys && configureData.dataDescription.ignoredKeys.length > 0 && (\n                      <ul className='value-list'>\n                        {configureData.dataDescription.ignoredKeys.map((ignoredKey, index) => (\n                          <li key={`value-keys-list-${index}`}>\n                            {ignoredKey}\n                            <button\n                              onClick={() => {\n                                let newIgnoredKeys = configureData.dataDescription.ignoredKeys\n                                newIgnoredKeys.splice(index, 1)\n                                updateDescriptionProp(visualizationKey, dataKey, 'ignoredKeys', newIgnoredKeys)\n                              }}\n                            >\n                              X\n                            </button>\n                          </li>\n                        ))}\n                      </ul>\n                    )}\n                    <select\n                      onChange={e => {\n                        if (e.target.value) {\n                          updateDescriptionProp(visualizationKey, dataKey, 'ignoredKeys', [...(configureData.dataDescription.ignoredKeys || []), e.target.value])\n                        }\n                        e.target.value = ''\n                      }}\n                    >\n                      <option value=''>Choose an option</option>\n                      {Object.keys(configureData.data[0])\n                        .filter(value => !configureData.dataDescription.ignoredKeys || configureData.dataDescription.ignoredKeys.indexOf(value) === -1)\n                        .map((value, index) => (\n                          <option value={value} key={`ignored-keys-option-${index}`}>\n                            {value}\n                          </option>\n                        ))}\n                    </select>\n                  </div>\n                </>\n              )}\n            </>\n          )}\n\n          {config?.visualizationType === 'Forest Plot' && (\n            <>\n              <div className='mb-2'>\n                <div className='mb-1'>Which column represents the date/category column?</div>\n                <select\n                  onChange={e => {\n                    setConfig({\n                      ...config,\n                      xAxis: {\n                        ...config.xAxis,\n                        dataKey: e.target.value\n                      }\n                    })\n                  }}\n                  defaultValue={'Select'}\n                >\n                  <option value=''>Choose an option</option>\n                  {Object.keys(configureData.data[0]).map((value, index) => (\n                    <option value={value} key={index}>\n                      {value}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className='mb-2'>\n                <div className='mb-1'>Which column represents your estimate field?</div>\n                <select\n                  onChange={e => {\n                    setConfig({\n                      ...config,\n                      forestPlot: {\n                        ...config.forestPlot,\n                        estimateField: e.target.value\n                      }\n                    })\n                  }}\n                  defaultValue={'Select'}\n                >\n                  <option value=''>Choose an option</option>\n                  {Object.keys(configureData.data[0]).map((value, index) => (\n                    <option value={value} key={index}>\n                      {value}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className='mb-2'>\n                <div className='mb-1'>Which column represents the low confidence interval?</div>\n                <select\n                  onChange={e => {\n                    setConfig({\n                      ...config,\n                      forestPlot: {\n                        ...config.forestPlot,\n                        lower: e.target.value\n                      }\n                    })\n                  }}\n                  defaultValue={'Select'}\n                >\n                  <option value=''>Choose an option</option>\n                  {Object.keys(configureData.data[0]).map((value, index) => (\n                    <option value={value} key={index}>\n                      {value}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className='mb-2'>\n                <div className='mb-1'>Which column represents the high confidence interval?</div>\n                <select\n                  onChange={e => {\n                    setConfig({\n                      ...config,\n                      forestPlot: {\n                        ...config.forestPlot,\n                        upper: e.target.value\n                      }\n                    })\n                  }}\n                  defaultValue={'Select'}\n                >\n                  <option value=''>Choose an option</option>\n                  {Object.keys(configureData.data[0]).map((value, index) => (\n                    <option value={value} key={index}>\n                      {value}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className='mb-2'>\n                <div className='mb-1'>Which shape do you want to use in your forest plot?</div>\n                <select\n                  onChange={e => {\n                    setConfig({\n                      ...config,\n                      forestPlot: {\n                        ...config.forestPlot,\n                        shape: e.target.value\n                      }\n                    })\n                  }}\n                  defaultValue={'Select'}\n                >\n                  <option value=''>Choose an option</option>\n                  {['text', 'circle', 'square', 'diamond'].map((value, index) => (\n                    <option value={value} key={index}>\n                      {value}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </>\n          )}\n        </>\n      )}\n      {configureData.dataDescription && configureData.formattedData && <div>Data configured successfully</div>}\n    </div>\n  )\n}\n\nexport default DataDesigner\n"],"names":["DATA_TABLE_VERTICAL","jsxs","Fragment","jsx","DATA_TABLE_HORIZONTAL","DATA_TABLE_SINGLE_ROW","DATA_TABLE_MULTI_ROW","DataDesigner","props","configureData","updateDescriptionProp","visualizationKey","dataKey","config","setConfig","Card","Button","e","value","index","valueKey","newValueKeys","ignoredKey","newIgnoredKeys"],"mappings":"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"}