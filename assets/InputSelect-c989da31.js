import{j as n,a as I,F as O}from"./jsx-runtime-670450c2.js";import{r as p}from"./index-f1f749bf.js";import{p as t}from"./index-4d501b15.js";import{u as E}from"./useVisConfig-ed2d617d.js";import{g as F}from"./store-4dc22f46.js";import{L as T}from"./Label-a6b7661b.js";/* empty css              */const m=({label:h,options:r=[""],initial:u,initialDisabled:d,initialSnap:S,required:q,tooltip:j,configField:l,value:w="",onChange:g,className:y,...C})=>{const{config:V,updateVisConfigField:x}=E(),[i,c]=p.useState(),f=p.useRef(null),s=l&&F(l,V),b=!!(s&&typeof s!==void 0);p.useEffect(()=>{b?s!==i&&c(s):c(w)},[b]),p.useEffect(()=>{v(i)||l&&i!==s&&x(l,i)},[l,i]);const v=e=>u&&(e===u||e==="");let o=null;if(r instanceof Array)o=r.map((e,a)=>n("option",{value:e,children:e},a));else if(r===Object(r)){let e=[];for(let[a,A]of Object.entries(r))e.push(n("option",{value:a,children:A},a));o=e}o&&(u||d)&&o.unshift(n("option",{value:"",hidden:d&&i!==""||null,disabled:d||null,children:u},"default"));const k=e=>{let a=e.target.value;c(a),g&&g(e),S&&v("")&&c("")};return I(O,{children:[h&&n(T,{tooltip:j,onClick:()=>{f.current.focus(),f.current.click()},children:h}),o?n("select",{className:`cove-input${q&&(i===void 0||i==="")?" cove-input--error":""}${y?" "+y:""}`,value:i??"",onChange:e=>k(e),...C,ref:f,children:o.map(e=>e)}):n("p",{className:"mb-2",children:n("i",{children:"No options are available..."})})]})};m.propTypes={label:t.string,tooltip:t.oneOfType([t.object,t.string]),options:t.oneOfType([t.array,t.object]),initial:t.string,initialDisabled:t.bool,initialSnap:t.bool,required:t.bool,configField:t.oneOfType([t.string,t.array]),onChange:t.func};const z=p.memo(m);m.__docgenInfo={description:"",methods:[],displayName:"InputSelect",props:{options:{defaultValue:{value:"[ '' ]",computed:!1},type:{name:"union",value:[{name:"array"},{name:"object"}]},required:!1,description:"Supply an array of options, or an object of key/value pairs to use as options"},value:{defaultValue:{value:"''",computed:!1},required:!1},label:{type:{name:"string"},required:!1,description:"Add label to the input field"},tooltip:{type:{name:"union",value:[{name:"object"},{name:"string"}]},required:!1,description:"Add a tooltip to describe the input's usage; JSX markup can also be supplied"},initial:{type:{name:"string"},required:!1,description:"Prepend a default initial option"},initialDisabled:{type:{name:"bool"},required:!1,description:"Allow the initial option to display, but disable selection of the initial option"},initialSnap:{type:{name:"bool"},required:!1,description:`Snap returns to the initial value, regardless of previous selection; helpful when triggering onChange() events
when an option is selected (like adding a filter from a list), and the select is expected to be used multiple times *`},required:{type:{name:"bool"},required:!1,description:"Mark the input as required; will set error style while value is undefined"},configField:{type:{name:"union",value:[{name:"string"},{name:"array"}]},required:!1,description:"Supply a reference to the config key this input connects to, if any.<br/><br/>\n**String**<br/>\n`configField=\"title\"` will connect to the `config.title` value.<br/><br/>\n**Array**<br/>\n`configField={[ 'componentStyle', 'shadow' ]}` will connect to the `config.componentStyle.shadow` value. <br/><br/>\nSee [setConfigKeyValue](https://cdcgov.github.io/cdc-open-viz/?path=/docs/helpers-confighelpers-setconfigkeyvalue--docs) for more details."},onChange:{type:{name:"func"},required:!1,description:"Function to call when the input is changed"}}};export{z as I};
//# sourceMappingURL=InputSelect-c989da31.js.map
