{"version":3,"file":"useVisConfig-ed2d617d.js","sources":["../../packages/core/helpers/fetchAsyncUrl.js","../../packages/core/helpers/update/ver/4.23.js","../../packages/core/helpers/update/coveUpdateWorker.js","../../packages/core/hooks/store/useVisConfig.jsx"],"sourcesContent":["const fetchAsyncUrl = async (url) => {\n  let res = await fetch(url)\n  return res.json()\n}\n\nexport default fetchAsyncUrl\n","const update_4_23 = async config => {\n  const ver = 4.23\n\n  let newConfig = { ...config }\n\n  if (!config.validated || config.validated < ver) {\n    // Convert theme definition in config to color only\n    if (newConfig.theme && newConfig.theme.includes('theme-')) {\n      newConfig.theme = newConfig.theme.split('-')[1]\n    }\n\n    // Move old visual config entries into new key\n    if (newConfig.visual) {\n      newConfig.componentStyle = {\n        accent: newConfig.visual.accent,\n        background: newConfig.visual.background,\n        border: newConfig.visual.border,\n        shadow: newConfig.visual.shadow\n      }\n\n      if (newConfig.visual.accent) delete newConfig.visual.accent\n      if (newConfig.visual.background) delete newConfig.visual.background\n      if (newConfig.visual.border) delete newConfig.visual.border\n      if (newConfig.visual.shadow) delete newConfig.visual.shadow\n    }\n\n    // Remove old visual config entries\n\n    // Config alterations complete\n    // Add validation mark to config...\n    newConfig.validated = ver\n  }\n\n  return newConfig\n}\n\nexport default update_4_23\n","// If config key names or position in the config have been changed with a version change,\n// process those config entries and format old values into new\nimport update_4_23 from './ver/4.23'\n\n\n// 4.23.1 ------------------------------------------------------\nconst coveUpdateWorker = async (config) => {\n  let genConfig = config\n\n  // v4.23\n  genConfig = await update_4_23(genConfig)\n\n  return genConfig\n}\n\nexport default coveUpdateWorker\n","import { createContext, useCallback, useContext, useEffect, useState, useRef, useTransition } from 'react'\n\n// Third Party\nimport { merge } from 'lodash'\n\n// Store\nimport useStore from '../../store/store'\n\n// Helpers\nimport { isConfigEqual } from '../../helpers/configHelpers'\nimport coveUpdateWorker from '../../helpers/update/coveUpdateWorker'\nimport fetchAsyncUrl from '../../helpers/fetchAsyncUrl'\n\n// Context\nexport const ConfigContext = createContext({})\nConfigContext.displayName = 'VisualizationConfig'\n\nexport const VisConfigProvider = ({ visualizationKey = '__default__', config: configObj, configUrl, children, defaultConfig, transformConfig } = {}) => {\n  const [ loading, setLoading ] = useState(false)\n\n  const configRef = useRef(configObj)\n  const updateDetected = useRef(false)\n\n  // Config Store Selectors\n  const addVisConfig = useStore(state => state.addVisConfig)\n  const updateVisConfig = useStore(state => state.updateVisConfig)\n  const storedConfig = useStore(state => state.visualizations[visualizationKey])\n  const dashboardStoredConfig = useStore(state => state.visualizations['__default__']?.visualizations?.[visualizationKey])\n\n  // Data Store Selectors\n  const getData = useStore(state => state.getData)\n\n  const finalConfig = useCallback(() => {\n    let resolvedConfig = dashboardStoredConfig ?? storedConfig\n\n    // If no resolved config, return null\n    if (!resolvedConfig) return null\n\n    if (transformConfig) {\n      resolvedConfig = transformConfig(resolvedConfig)\n    }\n\n    return resolvedConfig\n  }, [ dashboardStoredConfig, storedConfig, transformConfig ])\n\n  useEffect(() => {\n    // If the configObj changes externally, trigger a\n    // recycle of the initConfig loader.\n    if (!isConfigEqual(configObj, configRef.current)) {\n      configRef.current = configObj\n      updateDetected.current = true\n    }\n    return () => {}\n  }, [configObj])\n\n  useEffect(() => {\n    async function initConfig() {\n      const config = dashboardStoredConfig ?? configObj ?? (await fetchAsyncUrl(configUrl))\n\n      const resolvedConfig = merge(defaultConfig, config)\n      const processedConfig = { ...await coveUpdateWorker(resolvedConfig) }\n\n      // Run update worker on config, then set in store\n      if (dashboardStoredConfig) {\n        // Exists as dashboard store, so update it\n        updateVisConfig(visualizationKey, processedConfig)\n      } else {\n        // Doesn't exist in dashboard store, so add it as either the default, or a new visualization\n        addVisConfig(visualizationKey, processedConfig)\n      }\n\n      // Get initial data off config and put in store\n      await getData(visualizationKey, processedConfig)\n\n      updateDetected.current = false\n      setLoading(false)\n    }\n\n    if (!updateDetected.current) { // If no update detected, continue to next check\n      // If loading, or stored config already exists, return early\n      if (loading || storedConfig) return\n    }\n\n    // Otherwise, start loading\n    setLoading(true)\n\n    void initConfig()\n    return () => {}\n  }, [ configObj, configUrl, defaultConfig, loading, visualizationKey, storedConfig, dashboardStoredConfig, getData, addVisConfig, updateVisConfig ])\n\n  // No stored config found, so return null\n  if (loading || !finalConfig()) return null\n\n  // Build context value\n  const contextValue = { ...finalConfig(), visualizationKey }\n\n  return <ConfigContext.Provider value={contextValue}>{children}</ConfigContext.Provider>\n}\n\nexport const useVisConfig = () => {\n  const { visualizationKey, ...config } = useContext(ConfigContext)\n\n  const [, startTransition ] = useTransition()\n\n  // Actions -------------------------------------------------------------------------------------------------------\n  const storeUpdateVisConfig = useStore(state => state.updateVisConfig)\n  const storeUpdateVisConfigField = useStore(state => state.updateVisConfigField)\n\n  // Action Proxies ------------------------------------------------------------------------------------------------\n  const updateVisConfig = useCallback(\n    updates => {\n      startTransition(() => storeUpdateVisConfig(visualizationKey, updates))\n    },\n    [ storeUpdateVisConfig, visualizationKey ]\n  )\n\n  const updateVisConfigField = useCallback(\n    (fieldPayload, setValue, merge = true) => {\n      startTransition(() => storeUpdateVisConfigField(visualizationKey, fieldPayload, setValue, merge))\n    },\n    [ storeUpdateVisConfigField, visualizationKey ]\n  )\n  // ---------------------------------------------------------------------------------------------------------------\n\n  return {\n    config,\n    visualizationKey,\n    updateVisConfig,\n    updateVisConfigField\n  }\n}\n"],"names":["fetchAsyncUrl","url","update_4_23","config","newConfig","coveUpdateWorker","genConfig","ConfigContext","createContext","VisConfigProvider","visualizationKey","configObj","configUrl","children","defaultConfig","transformConfig","loading","setLoading","useState","configRef","useRef","updateDetected","addVisConfig","useStore","state","updateVisConfig","storedConfig","dashboardStoredConfig","_b","_a","getData","finalConfig","useCallback","resolvedConfig","useEffect","isConfigEqual","initConfig","merge","processedConfig","contextValue","useVisConfig","useContext","startTransition","useTransition","storeUpdateVisConfig","storeUpdateVisConfigField","updates","updateVisConfigField","fieldPayload","setValue"],"mappings":"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"}