import{M as c}from"./index-41cddf45.js";import{j as n,a as t,F as l}from"./jsx-runtime-f14b59b8.js";import{u as s}from"./index-093f7bde.js";import"./iframe-1badc4b0.js";import"../sb-preview/runtime.mjs";import"./index-18f6e4ac.js";import"./_commonjsHelpers-53f7dec1.js";import"./index-6820418a.js";import"./index-3e075a63.js";import"./index-8052939a.js";import"./index-87c76d85.js";import"./index-f4cbaf5b.js";import"./index-edb31f89.js";function d(r={}){const{wrapper:o}=Object.assign({},s(),r.components);return o?n(o,{...r,children:n(i,{})}):i();function i(){const e=Object.assign({h1:"h1",p:"p",code:"code",h2:"h2",pre:"pre",strong:"strong",ul:"ul",li:"li",em:"em",h3:"h3"},s(),r.components);return t(l,{children:[n(c,{title:"Helpers/CoveHelper/Data/getDataValues"}),"\n",n(e.h1,{children:"getDataValues"}),"\n",t(e.p,{children:["Function that iterates over each object in the provided ",n(e.code,{children:"data"}),", and pushes the value of the ",n(e.code,{children:"dataKey"})," property to the values array. Returns either the values array as is, or a new array created from the Set of unique values using the spread operator."]}),"\n",n(e.p,{children:" "}),"\n",n(e.h2,{children:"Syntax"}),"\n",n(e.pre,{children:n(e.code,{className:"language-js",children:"CoveHelper.Data.getDataValues(data, dataKey, unique = false)\n"})}),"\n",n(e.p,{children:n(e.strong,{children:"Parameters:"})}),"\n",t(e.ul,{children:["\n",t(e.li,{children:[n(e.code,{children:"data"}),": Array of data objects"]}),"\n",t(e.li,{children:[n(e.code,{children:"dataKey"}),": String representing the name of a column in the data"]}),"\n",t(e.li,{children:[n(e.code,{children:"unique"}),": ",n(e.em,{children:"(optional)"})," Boolean flag that defaults to false. If set to ",n(e.code,{children:"true"}),", returns only the unique values."]}),"\n"]}),"\n",n(e.p,{children:n(e.strong,{children:"Returns:"})}),"\n",t(e.p,{children:["An array of values found in the specified ",n(e.code,{children:"dataKey"})," column of the provided ",n(e.code,{children:"data"}),". If the ",n(e.code,{children:"unique"})," flag is set to true, returns only the unique values."]}),"\n",n(e.p,{children:" "}),"\n",n(e.h3,{children:"Example"}),"\n",n(e.pre,{children:n(e.code,{className:"language-js",children:"import CoveHelper from '@cdc/core/helpers/CoveHelper'\n\n...\n\nconst data = [\n  { name: 'Alice', age: 25, city: 'New York' },\n  { name: 'Bob', age: 30, city: 'San Francisco' },\n  { name: 'Charlie', age: 35, city: 'Boston' }\n]\n\nconst ages = CoveHelper.Data.getDataValues(data, 'age')\n\nconsole.log(ages) // [25, 30, 35]\n\nconst uniqueCities = CoveHelper.Data.getDataValues(data, 'city', true)\n\nconsole.log(uniqueCities) // ['New York', 'San Francisco', 'Boston']\n"})})]})}}const h=()=>{throw new Error("Docs-only story")};h.parameters={docsOnly:true};const a={title:"Helpers/CoveHelper/Data/getDataValues",tags:["stories-mdx"],includeStories:["__page"]};a.parameters=a.parameters||{};a.parameters.docs={...a.parameters.docs||{},page:d};const x=["__page"];export{x as __namedExportsOrder,h as __page,a as default};
//# sourceMappingURL=getDataValues.stories-80101b5f.js.map
