{"version":3,"file":"useVisConfig-ebd632ff.js","sources":["../../packages/core/hooks/store/useVisConfig.jsx"],"sourcesContent":["import { createContext, useCallback, useContext, useEffect, useState, useTransition } from 'react'\n\n// Third Party\nimport { merge } from 'lodash'\n\n// Store\nimport useStore from '../../store/store'\n\n// Helpers\nimport coveUpdateWorker from '../../helpers/update/coveUpdateWorker'\nimport fetchAsyncUrl from '../../helpers/fetchAsyncUrl'\n\n// Context\nexport const ConfigContext = createContext({})\nConfigContext.displayName = 'VisualizationConfig'\n\nexport const VisConfigProvider = ({ visualizationKey = '__default__', config: configObj, configUrl, children, defaultConfig, transformConfig } = {}) => {\n  const [ loading, setLoading ] = useState(false)\n\n  // Config Store Selectors\n  const addVisConfig = useStore(state => state.addVisConfig)\n  const updateVisConfig = useStore(state => state.updateVisConfig)\n  const storedConfig = useStore(state => state.visualizations[visualizationKey])\n  const dashboardStoredConfig = useStore(state => state.visualizations['__default__']?.visualizations?.[visualizationKey])\n\n  // Data Store Selectors\n  const getData = useStore(state => state.getData)\n\n  const finalConfig = useCallback(() => {\n    let resolvedConfig = dashboardStoredConfig ?? storedConfig\n    if (!resolvedConfig) {\n      return null\n    }\n\n    if (transformConfig) {\n      resolvedConfig = transformConfig(resolvedConfig)\n    }\n\n    return resolvedConfig\n  }, [ dashboardStoredConfig, storedConfig, transformConfig ])\n\n  useEffect(() => {\n    async function initConfig() {\n      const config = dashboardStoredConfig ?? configObj ?? (await fetchAsyncUrl(configUrl))\n\n      const resolvedConfig = merge(defaultConfig, config)\n      const processedConfig = { ...coveUpdateWorker(resolvedConfig) }\n\n      // Run update worker on config, then set in store\n      if (!dashboardStoredConfig) {\n        // Doesn't exist in dashboard store, so add it as either the default, or a new visualization\n        addVisConfig(visualizationKey, processedConfig)\n      } else {\n        // Exists as dashboard store, so update it\n        updateVisConfig(visualizationKey, processedConfig)\n      }\n\n      // Get initial data off config and put in store\n      await getData(visualizationKey, processedConfig)\n\n      setLoading(false)\n    }\n\n    if (loading || storedConfig) {\n      return\n    }\n\n    setLoading(true)\n    void initConfig()\n  }, [ configUrl, defaultConfig, loading, configObj, visualizationKey, storedConfig, dashboardStoredConfig, getData, addVisConfig, updateVisConfig ])\n\n  if (loading || !finalConfig()) {\n    console.log('no stored config!')\n    return null\n  }\n\n  const contextValue = { ...finalConfig(), visualizationKey }\n\n  return <ConfigContext.Provider value={contextValue}>{children}</ConfigContext.Provider>\n}\n\nexport const useVisConfig = () => {\n  const { visualizationKey, ...config } = useContext(ConfigContext)\n\n  const [, startTransition ] = useTransition()\n\n  // Actions -------------------------------------------------------------------------------------------------------\n  const storeUpdateVisConfig = useStore(state => state.updateVisConfig)\n  const storeUpdateVisConfigField = useStore(state => state.updateVisConfigField)\n\n  // Action Proxies ------------------------------------------------------------------------------------------------\n  const updateVisConfig = useCallback(\n    updates => {\n      startTransition(() => storeUpdateVisConfig(visualizationKey, updates))\n    },\n    [ storeUpdateVisConfig, visualizationKey ]\n  )\n\n  const updateVisConfigField = useCallback(\n    (fieldPayload, setValue, merge = true) => {\n      startTransition(() => storeUpdateVisConfigField(visualizationKey, fieldPayload, setValue, merge))\n    },\n    [ storeUpdateVisConfigField, visualizationKey ]\n  )\n  // ---------------------------------------------------------------------------------------------------------------\n\n  return {\n    config,\n    updateVisConfig,\n    updateVisConfigField\n  }\n}\n"],"names":["ConfigContext","createContext","useVisConfig","visualizationKey","config","useContext","startTransition","useTransition","storeUpdateVisConfig","useStore","state","storeUpdateVisConfigField","updateVisConfig","useCallback","updates","updateVisConfigField","fieldPayload","setValue","merge"],"mappings":"uJAaA,MAAAA,EAAAC,EAAAA,cAAA,CAAA,CAAA,EACAD,EAAA,YAAA,sBAmEA,MAAAE,EAAA,IAAA,CACA,KAAA,CAAA,iBAAAC,EAAA,GAAAC,CAAA,EAAAC,aAAAL,CAAA,EAEA,CAAA,CAAAM,CAAA,EAAAC,EAAAA,gBAGAC,EAAAC,EAAAC,GAAAA,EAAA,eAAA,EACAC,EAAAF,EAAAC,GAAAA,EAAA,oBAAA,EAGAE,EAAAC,EAAA,YACAC,GAAA,CACAR,EAAA,IAAAE,EAAAL,EAAAW,CAAA,CAAA,CACA,EACA,CAAAN,EAAAL,CAAA,CAAA,EAGAY,EAAAF,EAAA,YACA,CAAAG,EAAAC,EAAAC,EAAA,KAAA,CACAZ,EAAA,IAAAK,EAAAR,EAAAa,EAAAC,EAAAC,CAAA,CAAA,CACA,EACA,CAAAP,EAAAR,CAAA,CAAA,EAIA,MAAA,CACA,OAAAC,EACA,gBAAAQ,EACA,qBAAAG,CAAA,CAEA"}