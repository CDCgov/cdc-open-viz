import{j as E,F as K}from"./jsx-runtime-670450c2.js";import{r as m}from"./index-f1f749bf.js";import{p}from"./index-4d501b15.js";import{u as C}from"./globalStore-3225bb68.js";import{u as x}from"./configStore-d2c2b356.js";class z{constructor(){this.constants={errorMessageEmtpyData:"Your data file is empty.",errorMessageFormat:"Your datatype is not supported.",descriptionHeader:1,descriptionRoot:2,descriptionSeriesFilter:3}}autoStandardize(s){const e=[];if(s.length===0&&e.push(this.constants.errorMessageEmptyData),(!s.filter||s.filter(r=>typeof r!="object").length>0)&&e.push(this.constants.errorMessageFormat),e.length>0){console.error(e);return}if(s.filter(r=>r.constructor!==Object).length>0){let r=[];for(let i=1;i<s.length;i++){let t={};s[i].forEach((o,a)=>{t[s[0][a]]=o}),r.push(t)}s=r}return s}developerStandardize(s,e){if(e&&!(e.horizontal===void 0||e.series===void 0)&&!(e.series===!0&&e.horizontal===!1&&e.singleRow===void 0)){if(e.horizontal===!0)if(e.series===!0){if(!e.seriesKey)return;let r={},i=[];return s.forEach(t=>{let o=[];Object.keys(t).forEach(a=>{a!==e.seriesKey&&isNaN(parseFloat(t[a]))&&o.push(a)}),Object.keys(t).forEach(a=>{if(a!==e.seriesKey&&o.indexOf(a)===-1){let n=a+"|"+o.map(h=>h+"="+t[h]);r[n]||(r[n]={[t[e.seriesKey]]:t[a],key:a},o.forEach(h=>{r[n][h]=t[h]})),r[n][t[e.seriesKey]]=t[a]}})}),Object.keys(r).forEach(t=>{i.push(r[t])}),i}else{let r=[];return s.forEach(i=>{let t=[];Object.keys(i).forEach(o=>{isNaN(parseFloat(i[o]))&&t.push(o)}),Object.keys(i).forEach(o=>{if(t.indexOf(o)===-1){let a={key:o,value:i[o]};t.forEach(n=>{a[n]=i[n]}),r.push(a)}})}),r}else if(e.series===!0&&e.singleRow===!1)if(e.seriesKey!==void 0&&e.xKey!==void 0&&e.valueKey!==void 0){let r={},i=[];return s.forEach(t=>{let o=[],a=t[e.xKey];Object.keys(t).forEach(n=>{n!==e.xKey&&n!==e.seriesKey&&n!==e.valueKey&&(a+="|"+n+"="+t[n],o.push(n))}),r[a]?r[a][t[e.seriesKey]]=t[e.valueKey]:(r[a]={[e.xKey]:t[e.xKey],[t[e.seriesKey]]:t[e.valueKey]},o.forEach(n=>{r[a][n]=t[n]}))}),Object.keys(r).forEach(t=>{i.push(r[t])}),i}else return;return s}}}const O=u=>{let e={...u};return(!u.validated||u.validated<4.23)&&(e.theme.includes("theme-")&&(e.theme=e.theme.split("-")[1]),delete e.hideBackgroundColor,delete e.roundedBorders,delete e.borderColorTheme,e.validated=4.23),e},S=u=>{let s=u;return s=O(s),s},y=({configObj:u,configUrl:s,defaults:e=null,runtime:r=null,children:i})=>{const{viewMode:t}=C(g=>g),{setConfigDefaults:o,updateConfig:a}=x(),[n,h]=m.useState(!1),[j,v]=m.useState(!0),b=new z;return m.useEffect(()=>{const g=async l=>{console.log(l);let d=null;try{const c=await(await fetch(l)).text();d=JSON.parse(c)}catch{console.error("Supplied config URL is not in JSON format - invalid address?")}return d};n||(async()=>{e&&o({...e});let l=u||await g(s)||{},d=l.formattedData||l.data||[];l.dataUrl&&(d=await(await fetch(l.dataUrl)).json(),l.dataDescription&&(d=b.autoStandardize(d),d=b.developerStandardize(d,l.dataDescription)));let f=e?{...e,...l}:{...l};return e&&Object.keys(e).forEach(c=>{f[c]&&typeof f[c]=="object"&&!Array.isArray(f[c])&&(f[c]={...e[c],...f[c]})}),f=S(f),f.data=d,f.table&&f.table.show===void 0&&(f.table.show=t==="dashboard"),f})().then(l=>{a(l,r),v(!1)}).catch(console.error).finally(()=>{h(!0)})},[n,u,s]),j?E(K,{}):i};y.propTypes={configObj:p.object,configUrl:p.string,defaults:p.object,runtime:p.func};y.__docgenInfo={description:"",methods:[],displayName:"ConfigProxy",props:{defaults:{defaultValue:{value:"null",computed:!1},type:{name:"object"},required:!1,description:"A json object containing any default, baseline values for a visualization."},runtime:{defaultValue:{value:"null",computed:!1},type:{name:"func"},required:!1,description:"A visualization-specific function that is run against the resolved *configObj* or *configURL* object; returns a modified object based off those processed values"},configObj:{type:{name:"object"},required:!1,description:"A *__json object__* containing values used for configuration of the dashboard or component"},configUrl:{type:{name:"string"},required:!1,description:"A *__url referral to a json object__* containing values used for configuration of the dashboard or component"}}};export{y as C};
//# sourceMappingURL=ConfigProxy-adf6c554.js.map
