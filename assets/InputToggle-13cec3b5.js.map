{"version":3,"file":"InputToggle-13cec3b5.js","sources":["../../packages/core/components/input/InputToggle.jsx"],"sourcesContent":["import React, { useState, useEffect, memo, useRef } from 'react'\n\n// Third Party\nimport PropTypes from 'prop-types'\n\n// Hooks\nimport { useVisConfig } from '../../hooks/store/useVisConfig'\n\n// Helpers\nimport { getConfigKeyValue } from '../../helpers/configHelpers'\n\n// Components\nimport Label from '../element/Label'\n\n// Styles\nimport '../../styles/v2/components/input/index.scss'\n\nconst InputToggle = memo((\n  {\n    label,\n    labelPosition = 'right',\n    tooltip,\n    toggleType = 'flat',\n    size = 'small',\n    activeColor = '#005eaa',\n    stretch,\n    // required,\n\n    configField,\n    value: inlineValue,\n    className,\n    onClick,\n    ...attributes\n  }\n) => {\n  // Store Selectors\n  const { config, updateVisConfigField } = useVisConfig()\n\n  const [ value, setValue ] = useState(false)\n\n  const inputRef = useRef(null)\n\n  // Get initial value\n  const configFieldValue = configField && getConfigKeyValue(configField, config)\n\n  // Check initial value\n  // Valid value of 'false' could be returned, so checking undefined\n  const valueExistsOnConfig = Boolean(configFieldValue && typeof configFieldValue !== undefined)\n\n  // Set initial value\n  useEffect(() => {\n    if (valueExistsOnConfig) {\n      configFieldValue !== value && setValue(configFieldValue)\n    } else {\n      setValue(inlineValue)\n    }\n  }, [ valueExistsOnConfig ])\n\n  useEffect(() => {\n    if (configField && value !== configFieldValue)\n      updateVisConfigField(configField, value)\n  }, [ configField, value, updateVisConfigField ])\n\n  const onClickHandler = () => inputRef.current.click()\n\n  const onChangeHandler = (e) => {\n    setValue(value => !value)\n    onClick && onClick(e)\n  }\n\n  const generateWrapperClasses = () => {\n    const classList = []\n\n    // Root class\n    const root = 'cove-input__toggle-group'\n    classList.push(root)\n\n    // Stretch class\n    if (stretch) classList.push('cove-input__toggle-group--stretch')\n\n    // Props classes\n    if (className) classList.push(className)\n\n    return classList.join(' ')\n  }\n\n  const generateInputClasses = () => {\n    const classList = []\n\n    // Root class\n    const root = 'cove-input__toggle'\n    const suffixArr = {\n      small: '',\n      medium: '--medium',\n      large: '--large',\n      xlarge: '--xlarge'\n    }\n    classList.push(root + suffixArr[size])\n\n    // Type class\n    const typeArr = {\n      flat: 'cove-input__toggle--flat',\n      block: 'cove-input__toggle--block',\n      pill: 'cove-input__toggle--pill',\n      '3d': 'cove-input__toggle--3d'\n    }\n    classList.push(typeArr[toggleType] || '')\n\n    // Active class\n    if (value) classList.push('cove-input__toggle--active')\n\n    // Required class\n    // if (required && (value === undefined)) classList.push('cove-input--error')\n\n    return classList.join(' ')\n  }\n\n  const TooltipLabel = () => (\n    <div className=\"cove-input__toggle-group__label\">\n      <Label tooltip={tooltip} onClick={onClickHandler}>{label}</Label>\n    </div>\n  )\n\n  return (\n    <>\n      {label && labelPosition === 'top' &&\n        <TooltipLabel/>\n      }\n      <div className={generateWrapperClasses()} flow={labelPosition}>\n        {label && labelPosition === 'left' &&\n          <TooltipLabel/>\n        }\n        <div className={generateInputClasses()}\n          tabIndex={0}\n          onKeyUp={(e) => {\n            if (e.code === 'Enter' || e.code === 'NumpadEnter' || e.code === 'Space') onClickHandler()\n          }}\n          onClick={onClickHandler}>\n          <div className=\"cove-input__toggle-spacer\"/>\n          <div className=\"cove-input__toggle-button\"/>\n          <div className=\"cove-input__toggle-track\" style={value && activeColor ? { backgroundColor: activeColor } : null}/>\n          <input className=\"cove-input--hidden\" type=\"checkbox\" defaultChecked={value} onChange={(e) => onChangeHandler(e)} ref={inputRef} tabIndex={-1} readOnly/>\n        </div>\n        {label && labelPosition === 'right' &&\n          <TooltipLabel/>\n        }\n      </div>\n    </>\n  )\n})\n\nInputToggle.propTypes = {\n  /** Add label to the input field */\n  label: PropTypes.string,\n  /** Position the label relative to the toggle */\n  labelPosition: PropTypes.oneOf([ 'left', 'right', 'top' ]),\n  /** Add a tooltip to describe the toggle's usage; JSX markup can also be supplied */\n  tooltip: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object\n  ]),\n  /** Select the preferred display style of the toggle */\n  toggleType: PropTypes.oneOf([ 'flat', 'block', 'pill', '3d' ]),\n  /** Select the preferred size of the toggle */\n  size: PropTypes.oneOf([ 'small', 'medium', 'large', 'xlarge' ]),\n  /** Select the preferred color for the toggle when active */\n  activeColor: PropTypes.string,\n  /** Stretch the toggle and its label to fill the width of its container; Only available when label exists, and **labelPosition** is set to `left` or `right`. */\n  stretch: PropTypes.bool,\n  // /** Mark the toggle as required; will set error style while value is undefined */\n  // required: PropTypes.bool,\n  /** Current value of the input, usually the current config option value */\n  stateValue: PropTypes.bool\n}\n\nexport default InputToggle\n"],"names":["InputToggle","memo","label","labelPosition","tooltip","toggleType","size","activeColor","stretch","configField","inlineValue","className","onClick","attributes","config","updateVisConfigField","useVisConfig","value","setValue","useState","inputRef","useRef","configFieldValue","getConfigKeyValue","valueExistsOnConfig","useEffect","onClickHandler","onChangeHandler","generateWrapperClasses","classList","root","generateInputClasses","suffixArr","typeArr","TooltipLabel","jsx","Label","jsxs","Fragment","PropTypes"],"mappings":"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"}